<?xml version="1.0"?>
<!--
   Copyright 2004 The Apache Software Foundation
  
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.3//EN"
  "http://forrest.apache.org/dtd/document-v13.dtd"
[
	<!ENTITY projectroot '../'>
	<!ENTITY % links.ent SYSTEM "../links.ent">
  <!ENTITY % common.ent SYSTEM "common.ent">
	%links.ent;
  %common.ent;
  <!ENTITY application '&lt;application&gt;'>
  <!ENTITY bean '&lt;bean&gt;'>
  <!ENTITY binding '&lt;binding&gt;'>
  <!ENTITY component '&lt;component&gt;'>
  <!ENTITY component-type '&lt;component-type&gt;'>
  <!ENTITY component-specification '&lt;component-specification&gt;'>
  <!ENTITY configure '&lt;configure&gt;'>
  <!ENTITY library-specification '&lt;library-specification&gt;'>
]>
<document>
  <header>
	<title>Tapestry Specification DTDs</title>
	</header>

<body>

<p>
This document describes the four main types of specifications
used in Tapestry.  In all four cases, the same DOCTYPE is used:
</p>
 
<source>
<![CDATA[
<!DOCTYPE ]]><em>root element</em> <![CDATA[PUBLIC
  "-//Apache Software Foundation//Tapestry Specification 3.1//EN" 
  "http://jakarta.apache.org/tapestry/dtd/Tapestry_3_1.dtd">
]]></source>
 
<p>
The <em>root element</em> is different for each of the four types of specification files:
</p>

<table>

<tr>
	<th>Type</th>
	<th>File Extension</th>
	<th>Root Element</th>
</tr>

<tr>
	<td>Application</td>
	<td>application</td>
	<td>&spec.application;</td>
</tr>

<tr>
	<td>Page</td>
	<td>page</td>
	<td>&spec.page-specification;</td>
</tr>

<tr>
	<td>Component</td>
	<td>jwc</td>
	<td>&spec.component-specification;</td>
</tr>

<tr>
	<td>Library</td>
	<td>library</td>
	<td>&spec.library-specification;</td>
</tr>


</table>

<note>
A fifth type of specification, the Script specification, is described seperately.  In addition, in Tapestry 3.1, 
part of an application's behavior is defined by its &HiveMind; module deployment descriptor.
</note>

<section id="changes">
   <title>Changes between releases 3.0 and 3.1</title>

<p>
The specifications evolve over time, with each release providing an updated DTD allowing access to new features.
Tapestry 3.1 supports the Tapestry 3.0 DTD (just be sure to use the matching public ID), and in most cases
existing applications coded against release 3.0 will run unchanged under release 3.1 (though
it is expected that there will be some runtime warnings).
</p>

<p> The following features of the release 3.0 DTD are changed for release 3.1: </p>

<ul>
  <li>The &lt;service&gt; element (inside &spec.application; or &spec.library-specification;) is no longer supported in 
    release 3.1. 3.0 DTD specifications that use &lt;service&gt; will generate a warning. Use the 
    &tapestry.services.ApplicationServices; configuration point instead.</li>
  <li>
    In the 3.0 DTD, the &spec.binding; element was for specifying OGNL expressions only, and had an
    expression attribute.  In the 3.1 DTD, it is used for setting all types of attributes, and has
    a value attribute (using a prefix to determine which type of binding is to be used).
  </li>
  <li>The &lt;static-binding&gt; and &lt;message-binding&gt; elements have been removed, replaced with
    the &spec.binding; element and the ognl: and message: prefixes, respectively.</li>
  <li>The &lt;inherited-binding&gt; element has been removed; parameters of parent components may be
    accessed as properties.</li>
  <li>The &lt;property&gt; element (in 3.0) has been renamed to &spec.meta;.</li>
  <li>The &lt;property-specification; element (in 3.0) has been renamed to &spec.property;, and the type
    attribute has been dropped.</li>
  <li>The &spec.inject; element has been added.</li>
</ul>

</section>  <!-- changes -->

<section id="spec.application">
	<title>&application; element</title>
	

<p>
<em>root element</em>
</p>

<p>
The application specification defines the pages and components specific to a single Tapestry application.
It also defines any libraries that are used within the application.
</p>

<table>
<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>

<tr>
	<td>name</td>
	<td>string</td>
	<td>no</td>
	<td/>
	<td>User presentable name of application.</td>
</tr>
<tr>
	<td>engine-class</td>
	<td>string</td>
	<td>no</td>
	<td/>
	<td>Name of an implementation of &IEngine; to instantiate.  Defaults
	to &BaseEngine; if not specified.</td>
</tr>

</table>

<p>&application; Elements:</p>
<source>
  &spec.description; ?, &spec.meta; *,
  (&spec.page; | &spec.component-type; |  &spec.library; | &spec.extension;) *
</source>

</section>  <!-- spec.application -->

<section id="spec.bean">
	<title>&bean; element</title>
	
<p>
Appears in:
&spec.component-specification; and &spec.page-specification;
</p>	
	
<p>
A &bean; is used to add behaviors to a page or component via aggregation.
Each &bean; defines a named JavaBean that is instantiated on demand.
Beans are accessed through the OGNL expression beans.<em>name</em>.
</p>

<p>
Once a bean is instantiated and initialized, it will be retained by the page or component
for some period of time, specified by the bean's lifecycle.
</p>

<dl>
 <dt>none</dt>
  <dd>
			The bean is not retained, a new bean will be created on each access.
  </dd>

  <dt>page</dt>
  <dd>
			The bean is retained for the lifecycle of the page itself.
  </dd>
	
  <dt>render</dt>
  <dd>
			The bean is retained until the current render operation completes.
			This will discard the bean when a page or form finishes rewinding.
  </dd>
		
  <dt>request</dt>
  <dd>The bean is retained until the end of the current request.
	</dd>

</dl>

<p>
Caution should be taken when using lifeycle page.  A bean is associated
with a particular instance of a page within a particular JVM.  Consecutive requests
may be processed using different instances of the page, possibly in different JVMs (if the application
is operating in a clustered environment).  No state particular to a single client session should
be stored in a page.
</p>

<p>
Beans must be public classes with a default (no arguments) constructor. Properties of the bean
may be configured using the &spec.set-property; and &spec.set-message-property; elements.
</p>

<table>
<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>

<tr>
	<td>name</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>The name of the bean, which must be a valid Java identifier.</td>
</tr>
<tr>
	<td>class</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>The name of the class to instantiate.</td>
</tr>
<tr>
	<td>lifecycle</td>
	<td>none|page|render|request</td>
	<td>no</td>
	<td>request</td>
	<td>As described above; duration that bean is retained.</td>
</tr>


</table>



<p>&bean; Elements:</p>
<source>
  &spec.description; ?, &spec.meta; *,
  (&spec.set-property; | &spec.set-message-property;) *
</source>


</section> <!-- spec.bean -->	
 
<section id="spec.binding">
	<title>&binding; element</title>

<p>
Appears in: &spec.component;
</p>

<p>
Binds a parameter of an embedded component to particular value.
</p>

<p>
In an instantiated component, bindings can be accessed with
the OGNL expression bindings.<em>name</em>.
</p>

<p>
If the value attribute is omitted, then
the body of the element must contain the value.  This is useful when the
value is long, or contains problematic characters (such as a mix
of single and double quotes).
</p>


<table>

<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>

<tr>
	<td>name</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>The name of the parameter to bind.</td>
</tr>
<tr>
	<td>value</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>The value to bind to the parameter.</td>
</tr>

</table>

<p>
The value may be literal or interpreted; interpreted values are divided into a
<em>prefix</em> and a <em>locator</em>.  The prefix identifies how the locator is 
interpreted.
</p>

<table>
  <tr>
    <th>Prefix</th>
    <th>Locator Description</th>
  </tr>
  
  <tr>
    <td>ognl:</td>
    <td>The locator is an &OGNL; expression.  The expression is evaluated with the page or component as its root object (this is the page
      or component defined by the specification).  This is the only type of expression that may be writeable. </td>
  </tr>
  
  <tr>
    <td>message:</td>
    <td>The locator is a key used to obtain a localized message for the page or component.</td>
  </tr>
</table>

<note>
  More prefixes are forthcoming in release 3.1, and it is is also possible to define your own prefixes.
</note>


</section> <!-- spec.binding -->

<section id="spec.component">
	<title>&component; element</title>
	
<p>
Appears in: &spec.component-specification; and &spec.page-specification;
</p>

<p>
Defines an embedded component within a container (a page or another component).
</p>

<p>
In an instantiated component, embedded components can be accessed with
the OGNL expression components.<em>id</em>.
</p>


<table>
<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>

<tr>
	<td>id</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>Identifier for the component here and in the component's template.  Must be
	a valid Java identifier.</td>
</tr>
<tr>
	<td>type</td>
	<td>string</td>
	<td>no</td>
	<td/>
	<td>A component type to instantiate.</td>
</tr>
<tr>
	<td>copy-of</td>
	<td>string</td>
	<td>no</td>
	<td/>
	<td>The name of a previously defined component.  The type and bindings of that
	component will be copied to this component.
	</td>
</tr>

<tr>
	<td>inherit-informal-parameters</td>	
	<td>yes|no</td>
	<td>no</td>
	<td>no</td>
	<td>
	If yes, then any informal parameters of the containing
	component will be copied into this component.
	</td>
</tr>


</table>

<p>
Either type or copy-of must be specified.
</p>

<p>
A component type is either a simple name or a qualified name.  A simple name is the name of
an component either provided by the framework, or
provided by the application (if the page or component is defined in an application),
or provided by the library (if the page or component is defined in a library).
</p>

<p>
A qualified name is a library id, a colon, and a simple name of a component provided
by the named library (for example, contrib:Palette).  
Library ids are defined by a &spec.library; element in the
containing library or application.
</p>
	
<p>&component; Elements</p>
<source>
  &spec.meta; *,
  (&spec.binding; | &spec.listener-binding;) *
</source>

	
</section> <!-- spec.component -->




<section id="spec.component-specification">
	<title>&component-specification; element</title>

<p>
<em>root element</em>
</p>

<p>
Defines a new component, in terms of its API (&spec.parameter;s), embedded components, beans and
assets.
</p>

<p>
The structure of a &component-specification;
is very similar to a &spec.page-specification; except components have additional attributes
and elements related to parameters.
</p>



<table>

<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>

<tr>
	<td>class</td>
	<td>string</td>
	<td>no</td>
	<td/>
	<td>The Java class to instantiate, which must implement the
	interface &IComponent;.  If not specified, &BaseComponent; is used.
	</td>
</tr>
<tr>
	<td>allow-body</td>
	<td>yes|no</td>
	<td>no</td>
	<td>yes</td>
	<td>
	<p>If yes, then any body for this component, from its
	containing page or component's template, is retained and may be 
	produced using a &RenderBody; component.
	</p>
	<p>If no, then any body for this component is
	discarded.
	</p>	
	</td>
</tr>
<tr>
	<td>allow-informal-parameters</td>
	<td>yes|no </td>
	<td>no</td>
	<td>yes</td>
	<td>
	<p>If yes, then any informal parameters
	(bindings that don't match a formal parameter) specified here, or in
	the component's tag within its container's template, are retained.
	Typically, they are converted into additional HTML attributes.
	</p>
	<p>If no, then informal parameters
	are not allowed in the specification, and discarded if in the template.
	</p>
	</td>
</tr>

</table>

<p>&component-specification; Elements</p>
<source>
  &spec.description; ?, &spec.parameter; *, &spec.reserved-parameter; *, &spec.meta; *,
  (&spec.bean; | &spec.component; | &spec.external-asset; | &spec.context-asset; | &spec.private-asset; | 
   &spec.property; | &spec.inject;)*
</source>


</section> <!-- spec.component-specification -->


<section id="spec.component-type">
	<title>&component-type; element</title>
	
<p>
Appears in: &spec.application; and 	&spec.library-specification;
</p>

<p>
Defines a component type that may latter be used in a &spec.component; element
(for pages and components also defined by this application or library).
</p>

<table>

<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>

<tr>
	<td>type</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>A name to be used as a component type.</td>
</tr>
<tr>
	<td>specification-path</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>An absolute or relative resource path to the component's specification (including leading
	slash and file extension).  Relative resources are evaluated relative to
	 the location of the containing application or library specfication.</td>
</tr>

</table>


</section> <!-- spec.component-type -->

<section id="spec.configure">
	<title>&configure; element</title>

<p>
Appears in: &spec.extension;
</p>

<p>
Allows a JavaBeans property of the extension to be set from a statically defined value.  The
&configure; element
wraps around the static value.  The value is trimmed of leading and trailing
whitespace and optionally converted to a specified type before being assigned
to the property.
</p>


<table>

<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>

<tr>
	<td>property-name</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>The name of the extension property to configure.</td>
</tr>
<tr>
	<td>type</td>
	<td>boolean|int|long|double|String</td>
	<td>no</td>
	<td>String</td>
	<td>The conversion to apply to the value.</td>
</tr>
<tr>
	<td>value</td>
	<td/>
	<td>no</td>
	<td/>
	<td>The value to configure, which will be converted before being assigned
	to the property.  If not provided, the character data wrapped by the element
	is used instead.
	</td>
</tr>

</table>




</section> <!-- spec.configure -->



<section id="spec.context-asset">
	<title>&lt;context-asset&gt; element</title>

<p>
Specifies an asset located relative to the web application context root folder.
Context assets may be localized.
</p>

<p>
Assets for an instantiated component (or page) 
may be accessed using the OGNL expression assets.<em>name</em>.
</p>

<p>
The path may be either absolute or relative.  Absolute paths start with a leading slash, and are evalulated
relative to the context root.  Relative paths are evaluated relative to the application root, which
is typically the same as the context root (the exception being a WAR that contains multiple
Tapestry applications, within multiple subfolders).
</p>

<table>

<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>

<tr>
	<td>name</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>The name of the asset, which must be a valid Java identifier.</td>
</tr>
<tr>
	<td>path</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>The path to the asset.
	</td>
</tr>

</table>


</section> <!-- spec.context-asset -->

<section id="spec.description">
	<title>&lt;description&gt; element</title>
	
<p>
Appears in: <em>many</em>
</p>

<p>
A description may be attached to a many different elements.  Descriptions are used
by an intelligent IDE to provide help.  The Tapestry Inspector may also display a description.
</p>
	
<p>
The descriptive text appears inside the &lt;description&gt; tags.  Leading
and trailing whitespace is removed and interior whitespace may be altered or removed.  Descriptions
should be short; external documentation can provide greater details.
</p>
	
<p>
The 	&lt;description&gt;
element has no attributes.
</p>

</section> <!-- spec.description -->

<section id="spec.extension">
	<title>&lt;extension&gt; element</title>

<p>
Appears in: &spec.application; and &spec.library-specification;
</p>

<p>
Defines an extension, a JavaBean that is instantiated as needed to provide
a global service to the application.
</p>


<table>

<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>

<tr>
	<td>name</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>A name for the extension, which can (and should) look like
	a qualified class name, but may also include the dash character.
	</td>
</tr>
<tr>
	<td>class</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>The Java class to instantiate.  The class must have a zero-arguments
	constructor.</td>
</tr>
<tr>
	<td>immediate</td>
	<td>yes|no</td>
	<td>no</td>
	<td>no</td>
	<td>If yes, the extension is instantiated when the specification is read.  If 
	no, then the extension is not created until first needed.
	</td>
</tr>

</table>


<p>&lt;extension&gt; Elements</p>
<source>
  &spec.meta; *, &spec.configure; *
</source>


</section> <!-- spec.extension -->

<section id="spec.external-asset">
	<title>&lt;external-asset&gt; element</title>

<p>
Appears in: &spec.component-specification; and &spec.page-specification;
</p>

<p>
Defines an asset at an arbitrary URL.  The URL may begin with a slash to indicate an asset on the same
web server as the application, or may be a complete URL to an arbitrary location on the Internet.
</p>

<p>
External assets may be accessed at runtime with the OGNL expression
assets.<em>name</em>.
</p>

<table>

<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>


<tr>
	<td>name</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>A name for the asset. Asset names must be valid Java identifiers.
	</td>
</tr>
<tr>
	<td>URL</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>The URL used to access the asset.</td>
</tr>

</table>

</section> <!-- spec.external-asset -->

<section id="spec.inject">
  <title>&lt;inject&gt; element</title>
  
  <p>
    Appears in: &spec.component-specification; and &spec.page-specification;.
  </p>
  
  <p>
  <em>Injects</em> an object from the &HiveMind; Registry as a read-only property
  of the page or component.
  </p>
  
  <table>
<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>

<tr>
  <td>object</td>
  <td>string</td>
  <td>yes</td>
  <td/>
  <td>
    The <em>locator</em> for the object to be injected.  A locator contains a prefix, such as "service:", which defines the
    type of object to locate.  The string following the prefix locates the specific object to be returned.
    &HiveMind; provides a 
    <link href="http://jakarta.apache.org/hivemind/hivemind/ObjectProviders.html">basic set of prefixes</link>;
    Tapestry adds a few additional prefixes.
    
  </td>
</tr>

<tr>
  <td>name</td>
  <td>string</td>
  <td>yes</td>
  <td/>
  <td>
    The name of the property to be created.  If the class provides an abstract accessor method, then that method defines
    the type of the property; otherwise java.lang.Object will be used.
  </td>
</tr>
  </table>
  
</section>

<section id="spec.library">
	<title>&lt;library&gt; element</title>
	
<p>
Appears in: &spec.application; and &spec.library-specification;
</p>

<p>
Establishes that the containing application or library uses components defined in
another library, and sets the prefix used to reference those components.
</p>

<table>

<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>

<tr>
	<td>id</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>The id associated with the library.  Components within the library
	can be referenced with the component type
	<em>id</em>:<em>name</em>.
	</td>
</tr>
<tr>
	<td>specification-path</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>The complete resource path for the library specification.
	</td>
</tr>

</table>

</section> <!-- spec.library -->

<section id="spec.library-specification">
	<title>&library-specification; element</title>
	
<p>
<em>root element</em>
</p>

<p>
Defines the pages, components, services and libraries used by a library.  Very similar
to &spec.application;, but without attributes related application name or engine class.
</p>

<p>
The 	&library-specification;
element has no attributes.
</p>
	

<p>&library-specification; Elements</p>
<source>
  &spec.description; ?, &spec.meta; *,
  (&spec.page; | &spec.component-type; | &spec.library; | &spec.extension;) *
</source>

</section> <!-- spec.library-specification -->



<section id="spec.listener-binding">
	<title>&lt;listener-binding&gt; element</title>

<p>
Appears in: &spec.component;
</p>


<p>
A listener binding is used to create application logic, in the form
of a listener (for a &DirectLink;, &ActionLink;, &Form;, etc.)
in place within the specification, in 
a scripting language (such as &Jython; or JavaScript).  The script itself
is the wrapped character data for the &lt;listener-binding&gt; 
element.
</p>

<p>
When the listener is triggered, the script is executed.  Three beans,
page, component and cycle
are pre-declared.
</p>

<p>
The page is the page activated by the request.  Usually, this is
the same as the page which contains the component ... in fact,
usually page and compoment are identical.
</p>

<p>
The component is the component from whose specification
the binding was created (that is, not the &DirectLink;, but the page or component
which embeds the &DirectLink;).
</p>

<p>
The cycle is the active request cycle, from which service parameters
may be obtained.
</p>


<table>

<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>

<tr>
	<td>name</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>The name of the listener parameter to bind.</td>
</tr>
<tr>
	<td>language</td>
	<td>string</td>
	<td>no</td>
	<td/>
	<td>The name of a &BSF;-supported language that the script is written in.  The default,
	if not specified, is jython.
	</td>
</tr>

</table>


</section> <!-- spec.listener-binding -->


<section id="spec.meta">
	<title>&lt;meta&gt; element</title>
	
<p>
Appears in: <em>many</em>
</p>

<p>
The &lt;meta&gt; element is used to store meta-data
about some other element (it is contained within).  Tapestry ignores this meta-data.
Any number of key/value pairs may be stored.  The value is provided with
the value attribute, or the 
character data for the &lt;meta&gt; element.
</p>

<table>

<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>

<tr>
	<td>key</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>The name of the property.</td>
</tr>
<tr>
	<td>value</td>
	<td>string</td>
	<td>no</td>
	<td/>
	<td>The value for the property.  If omitted, the value is taken
	from the character data (the text the tag wraps around).  If specified,
	the character data is ignored.</td>
</tr>

</table>

<note>
  In the Tapestry 3.0 DTD, this element was named &lt;property&gt;.
</note>

</section> <!-- spec.meta -->


<section id="spec.page">
	<title>&lt;page&gt; element</title>

<p>
Appears in: &spec.application; and &spec.library-specification;
</p>

<p>
Defines a page within an application (or contributed by a library).
Relates a logical name for the page to the path to the page's specification file.
</p>


<table>

<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>

<tr>
	<td>name</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>The name for the page, which must start with a letter,
	and may contain letters, numbers, underscores and the dash
	character.
	</td>
</tr>
<tr>
	<td>specification-path</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>
	The path to the page's specification, which may be absolute
	 (start with a leading slash), or relative to the application or library
	 specification.
	</td>
</tr>

</table>


</section> <!-- spec.page -->

<section id="spec.page-specification">
	<title>&lt;page-specification&gt; element</title>

<p>
<em>root element</em>
</p>

<p>
Defines a page within an application (or a library).  The 
&lt;page-specification&gt;
is a subset of &spec.component-specification;
with attributes and entities related to parameters removed.
</p>


<table>

<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>

<tr>
	<td>class</td>
	<td>string</td>
	<td>no</td>
	<td/>
	<td>The Java class to instantiate, which must implement the
	interface &IPage;.  Typically, this is
	&BasePage; or a subclass of it.  &BasePage; is the default if not otherwise
	 specified.</td>
</tr>

</table>


<p>&lt;page-specification&gt; Elements</p>
<source>
  &spec.description; ?, &spec.meta; *,
  (&spec.bean; | &spec.component; | &spec.external-asset; | &spec.context-asset; | &spec.private-asset; | &spec.property; | &spec.inject;)*
</source>


</section> <!-- spec.page-specification -->

<section id="spec.parameter">
	<title>&lt;parameter&gt; element</title>

<p>
Appears in: &spec.component-specification;
</p>

<p>
Defines a formal parameter of a component.  Parameters may be connected 
(in, form or auto)
or unconnected (custom).  If a parameter is
connected, but the class does not provide the property (or does, but
the accessors are abstract), then the framework
will create and use a subclass that contains the implementation
of the necessary property.
</p>

<p>
For auto parameters, the framework will create a synthetic property
as a wrapper around the binding.  Reading the property will read the value from
the binding and updating the property will update the binding value.  auto
may only be used with required parameters.  auto is less
efficient than in, but can be used even when the component
is not rendering.
</p>


<table>

<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>

<tr>
	<td>name</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>The name of the parameter, which must be 
	a valid Java identifier.</td>
</tr>
<tr>
  <td>type</td>
  <td>scalar name, or class name</td>
  <td>no</td>
  <td/>
  <td>Required for connected parameters.  Specifies
   the type of the JavaBean property that a connected
   parameter writes and reads.  The property must
    match this exact value, which can be a fully specified class name,
    or the name of a scalar Java type.  
   </td>
  </tr>
  
<tr>
  <td>required</td>
  <td>yes|no</td>
  <td>no</td>
  <td>no</td>
  <td>If yes, then the parameter must be
  bound (though it is possible that the binding's value
  will still be null).
 </td>
</tr>

<tr>
  <td>property-name</td>
  <td>string</td>
  <td>no</td>
  <td/>
  <td>For connected parameters only; allows the name of the property
  to differ from the name of the parameter.  If not specified,
  the property name will be the same as the parameter name.
  </td>
</tr>

<tr>
  <td>direction</td>
  <td>in|form|auto|custom</td>
  <td>no</td>
  <td>custom</td>
  <td>
  <p>
  Identifies the semantics of how the parameter is used by the
  component.  custom, the default, means the
  component explicitly controls reading and writing values through
  the binding.
  </p>
  
  <p>
  in means the property is set from the parameter
  before the component renders, and is reset back to default value
  after the component renders.
  </p>
  
  <p>
  form means that the property is set from the
  parameter when the component renders (as with in).
  When the form is submitted, the value is read from the property
  and used to set the binding value after the component rewinds.
  </p>
  
  <p>
  auto creates a synthetic property that works
  with the binding to read and update.  auto
  parameters must be required, but can be used even when the
  component is not rendering.
  </p>
  </td>
</tr>

<tr>
	<td>default-value</td>	
	<td>OGNL expression</td>
	<td>no</td>
	<td/>
	<td>
	Specifies the default value for the parameter, if the parameter is not bound.	
	</td>
</tr>


</table>




</section> <!-- spec.parameter -->

<section id="spec.private-asset">
	<title>&lt;private-asset&gt; element</title>

<p>
Specifies located from the classpath.  These exist to support
reusable components packages (as part of a &spec.library-specification;)
packaged in a JAR.  Private assets will be localized.
</p>

<p>
Assets for an instantiated component (or page) 
may be accessed using the OGNL expression assets.<em>name</em>.
</p>

<p>
The resource path may either be complete and absolute, and start with a leading slash,
or be relative.  Relative paths are evaluated relative to the location of the
containing specification.
</p>



<table>

<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>

<tr>
	<td>name</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>The name of the asset, which must be a valid Java identifier.</td>
</tr>
<tr>
	<td>resource-path</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>The absolute or relative path to the asset on the classpath. 
	</td>
</tr>

</table>


</section> <!-- spec.private-asset -->

<section id="spec.property">
	<title>&lt;property&gt; element</title>
	
<p>
Appears in: &spec.component-specification;, &spec.page-specification;
</p>

<p>
Defines a transient or persistent property to be added to the page or component.
Tapestry will create a subclass of the page or component class (at runtime)
and add the necessary fields and accessor methods, as well as end-of-request
cleanup.
</p>

<p>
It is acceptible for a page (or component) to be abstract, and have abstract accessor methods
matching the names that Tapestry will generate for the subclass.  This can be
useful when setting properties of the page (or component) from a &listener-method;.
</p>

<p>
A connected parameter specified in a &spec.parameter; element may also cause an enhanced subclass
to be created.
</p>

<p>
An initial value may be specified as either the initial-value
attribute, or as the body of the &lt;property&gt; element
itself.
</p>


<table>

<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>

<tr>
	<td>name</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>The name of the property to create.</td>
</tr>
<tr>
	<td>persistent</td>
	<td>yes|no</td>
	<td>no</td>
	<td>no</td>
	<td>
	If true, the generated property will be persistent, firing change notifications
	when it is updated.
	</td>
</tr>
<tr>
	<td>initial-value</td>
	<td>string</td>
	<td>no</td>
	<td/>
	<td>
	An optional OGNL expression used to initialize the property.  The expression is evaluated
	only when the page is first constructed.
	</td>
</tr>

</table>

<note> In the Tapestry 3.0 DTD, this element was named &lt;property-specification&gt; and had an additional attribute, 
  type. In Tapestry 3.1, the type of the implemented property will simply match the type of any existing (abstract) 
  property, or will simply be type Object. </note>

</section> <!-- spec.property -->

<section id="spec.reserved-parameter">
	<title>&lt;reserved-parameter&gt; element</title>
	
<p>
Appears in: &spec.component-specification;
</p>

<p>
Used in components that allow informal parameters to limit the possible
informal parameters (so that there aren't conflicts with HTML attributes
generated by the component).
</p>

<p>
All formal parameters are automatically reserved.
</p>

<p>
Comparisons are caseless, so an informal parameter of "SRC", "sRc", etc., will match
a reserved parameter named "src" (or any variation), and be excluded.
</p>



<table>

<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>

<tr>
	<td>name</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>The name of the reserved parameter.</td>
</tr>

</table>



</section> <!-- spec.reserved-parameter -->


<section id="spec.set-message-property">
	<title>&lt;set-message-property&gt; element</title>

<p>
Appears in: &spec.bean;
</p>

<p>
Allows a property of a helper bean to be set to a localized string
value of its containing page or component.
</p>


<table>

<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>


<tr>
	<td>name</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>The name of the helper bean property to set.</td>
</tr>
<tr>
	<td>key</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>A string property key of the containing page or component.
	</td>
</tr>

</table>


</section> <!-- spec.set-message-property -->

<section id="spec.set-property">
	<title>&lt;set-property&gt; element</title>
	
<p>
Appears in: &spec.bean;
</p>

<p>
Allows a property of a helper bean to be set to an OGNL expression (evaluated
on the containing component or page).
</p>


<p>
The value to be assigned to the bean property can be specified
using the expression attribute, or as
the content of the &lt;set-property&gt; element
itself.
</p>

<table>

<tr>
  <th>Name</th>
  <th>Type</th>
  <th>Required ?</th>
  <th>Default Value</th>
  <th>Description</th>
</tr>

<tr>
	<td>name</td>
	<td>string</td>
	<td>yes</td>
	<td/>
	<td>The name of the helper bean property to set.</td>
</tr>
<tr>
	<td>expression</td>
	<td>string</td>
	<td>no</td>
	<td/>
	<td>The OGNL expression used to set the property.
	</td>
</tr>

</table>


</section> <!-- spec.set-property -->

</body>
</document>

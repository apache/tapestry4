<?xml version="1.0"?>
<!-- 
   Copyright 2005 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "./dtd/document-v12.dtd" [
  <!ENTITY projectroot '../'>
  <!ENTITY % links.ent SYSTEM "../links.ent">
  <!ENTITY % common.ent SYSTEM "common.ent">
  %links.ent;
  %common.ent;
  ]>
<document>
  <header>
    <title>Localization</title>
  </header>
  <body>
    <p> Proper localization is a pervasive aspects of web application development. Supporting users from different countries, with different languages, can be a tricky proposition ... it is more than just text that must be localized, but more subtle aspects of the application such as date and currency formats. It is also more than text ... in some cases, a localized application will want to change images or even color schemes. </p>
    <p> Localization support in Tapestry is likewise pervasive. </p>
    <section id="localization.component-catalog">
      <title>Component Message Catalogs</title>
      <p> The most fundamental aspect of localization in Tapestry are component message catalogs (remember that pages are components too). A message catalog is a mapping from a logical key (that may appear in Java code or in OGNL expressions) to a literal string. Tapestry message catalogs are similar to Java's ResourceBundle class, except there is more flexibility in the character set of the files, and the location of the files. </p>
      <p> Each component <em>may</em> have a message catalog, consisting of a set of localized message properties files. </p>
      <p> These files are stored with the page or component specification file. They are named the same as the specification file, but with a different extension (".properties" instead of ".jwc" or ".page"). </p>
      <p> In addition, this is a <em>set</em> of files; a locale string may be inserted just before the extension. For example, <code>WEB-INF/Home_fr.properties</code> to contain the French language localization of the keys. </p>
      <p> As with Java's ResourceBundle, resolution of a key to a message starts with the most 
        <em>specific</em> properties file. Any key not found there will be searched for in less specific files.  For example,
        the search path could be <code>Home_fr_BE.properties</code>, <code>Home_fr.properties</code>, <code>Home.properties</code>.</p>
        <p>If a properties file does not exist, that's perfectly ok, the search will continue.</p>
      <p>
        When a key can not be found even in the most general properties file, a search occurs in the
        <link href="#localization.namespace">namespace</link>. In this way, very common strings can be
        stored and localized once, and used throughout a library or application.
      </p>
      <p> We'll describe how to use the message catalog shortly, but first some notes on how the message catalogs are read. </p>
      <section id="localization.component-catalog.encoding">
        <title>Properties file encoding</title>
        <p> For Java's ResourceBundle, the properties files must be in UTF-8 character set. This can be problematic, as in non-western languages it is necessary to use Java's native2ascii tool to convert from non-native files into an ASCII encoding of UTF-8. </p>
        <p> Tapestry can ready properties files in alternate character sets, but must be told what character set the file is encoded in (internally, the contents must be converted into standard multi-byte Unicode). </p>
        <p> This is accomplished by providing some metadata inside the component (or page) specification. Metadata is specified using the &spec.meta; element. </p>
        <p> The resolution of the character set is somewhat complicated; it is  possible that each properties file will use a different 
          character set. At the same time, repetition is bad ... therefore it is possible to specify some of this information
          in the namespace meta data (in the containing application or library specification) so that it can apply to all pages
          and components within the namespace.</p>
          
        <p>
          The basic meta-data  property name searched for is <code>org.apache.tapestry.messages-encoding</code>.  The value for this name
          is the name of the charset for the properties file.
        </p>
        
        <p>
          However, the base name is modified to reflect the locale for the file being read; the locale string is appended
          to the key, thus <code>org.apache.tapestry.messages-encoding_fr</code> will define the character set for
          the file <code>WEB-INF/Home_fr.properties</code>
        </p>
        
        <p>
          For each localization of the base property name, a search of the following locations takes place.
        </p>
        <ul>
          <li>The page or component specification.</li>
          <li>The namespace (library or application) specification for the namespace containing the page or component.</li>
          <li>The &global-property-source;.</li>
        </ul>
        
        <p>
          Because localization of templates is similar to
          localization of message properties files,
          a second search occurs if the search for (variations of)
          <code>org.apache.tapestry.messages-encoding</code> fails; this time for
          <code>org.apache.tapestry.template-encoding</code> occurs (again, with variations
          for each locale).
        </p>
        
        <p>
          The ultimate default for encoding character set is
          ISO-8859-1; in other words, the same behavior as reading an ordinary
          Java ResourceBundle.
        </p>
          
      </section>
    </section>
    <section id="localization.missing-keys">
      <title>Missing keys</title>
      
      <p>
        While developing, you may occasionally reference a key that does not exist. Rather than fail  with an exception,
        Tapestry will fabricate a missing key value.  This is the key, converted to upper-case, and surrounded with brackets.  For example,
        <code>[A-MISSING-KEY</code>.  This allows missing key values to stand out an demand to be fixed, without
        completely subverting your application.
      </p>
      
    </section> <!-- localization.missing-keys -->
    <section id="localization.namespace">
      <title>Namespace message catalogs</title>
      
      <p>
      It is very likely that you'll have a number of strings that are used, and re-used, throughout
      your application. Rather than duplicate the same message keys and localized values in all your page
      and component message catalogs, you can put these into your <em>namespace</em> catalog.
      </p>
      
      <p>
        Each page and component is part of a <code>namespace</code>, identified by
        a library specification or component specification.
      </p>
      
      <p>
        The specification may also have a message catalog; for instance, for <code>WEB-INF/myapp.application</code>,
        the files would be named <code>WEB-INF/myapp.properties</code>, etc. Again, the 
        name of the file  is based on the servlet name ("myapp").
      </p>
      
      <p>
        Very simple applications may not have an application specification, but may still have
        properties, just as if the application specification existed.
      </p>
      
    </section> <!-- localization.namespace -->
    <!-- localization.component-catalog -->
    <section id="localization.template-text">
      <title>Template text localization</title>
      <p>As described in <link href="template.html#template.directives.l10n">the discussion of Tapestry templates</link>, 
        static text in an HTML template can be enclosed in a specialized &span; tag. </p>
      
    </section>
    
    <section id="localization.localized-templates">
      <title>Localized templates</title>
      
      <p>
        In some cases, the entire layout of a page (or component) must change due to locale. For example,
        because of differences between western languages (which read left to right) and many eastern
        languages (which read right to left).
      </p>
      
      <p>
        In this case, it is possible to have multiple HTML templates. If a localized template (i.e.,
        <code>Home_jp.html</code> for a Japanese locale) exists, it will be used as appropriate.
      </p>
      
      <p>
        Page and component <em>specifications</em> are never localized, just <em>templates</em>.
      </p>
      
      <p>
        It is a good idea to make use of declared components, rather than implicit components, when
        using localized templates ... it reduces duplication in the templates.
      </p>
    </section>
    
    <section id="localization.template-encoding">
      <title>Template encoding</title>
      
      <p>
        Like <link href="#localization.component-catalog.encoding">message catalogs</link>,
        each template may be written in a different character set.  
      </p>
      
        <p>
          For each localization of the base key (<code>org.apache.tapestry.template-encoding</code>, a search of the following locations takes place.
        </p>
        <ul>
          <li>The page or component specification.</li>
          <li>The namespace specification for the namespace containing the page or component.</li>
          <li>The <link href="configuration.html#configuration.search-path">application property search path</link></li>
        </ul>
    </section>
    
    <section id="localization.message-binding">
      <title>Using the message: binding prefix</title>
      
      <p>
        When specifying a parameter binding, the <code>message:</code> prefix
        is used to reference a localized message key.  For example:
      </p>
      
<source>
&lt;html jwcid="@&Shell;" title="message:page-title"&gt;
 . . .
&lt;/html&gt;
</source>      
      
    </section>
    
    <section id="localization.assets">
      <title>Localization of Assets</title>
      
      <p>
        Coming soon.
      </p>
    </section>  <!-- localization.assets -->
    
    <section id="localization.messages-property">
      <title>Formatting messages</title>
      
<p>
Messages may contain <em>arguments</em>, strings of the form <code>{0}</code> (or
some other number). The argument are handled exactly the same as with Java's MessageFormat
class (in fact, under the covers, MessageFormat does the work).
</p>      

<p>
Components include a <code>messages</code> property for accessing localized messages.
This property is of type Messages, and includes two methods:
</p>

<ul>
  <li><code>getMessage()</code> takes a string parameter and returns a localized message</li>
  <li><code>format()</code> takes a string parameter (the key) and then takes a number of
    additional parameters as arguments.  The arguments are just objects.  If you have more
    than three arguments, then specify them as an object array.</li>
</ul>

<p>
It is common to format messages using OGNL expessions, i.e.:
</p>

<source>
&lt;span jwcid="@&Insert;" value="ognl:messages.format('billing-info', amountDue)"/&gt;
</source>

<p>
The above example would get the amountDue property and pass it in as argument 0 to the message
format retrieved from the message catalog as key 'billing-info'.
</p>
      
    </section>
    
    <section id="localization.engine-locale">
      <title>Engine locale vs. page locale</title>
      
<p>
When pages are created, or obtained from the page pool, the engine's locale is
taken into account.  Pages are obtained when they are used by a service,
or when accessed via &IRequestCycle;.getPage().
</p>      
      
<p>
A page is loaded for a particular locale, and the page's locale never changes.
This is because of the degree to which localization creeps into the properties
of the page and the components within the page.
</p>      

<p>
Additionally, once a page  is loaded during a request cycle, it is kept
for the duration of the cycle ... even if the engine locale changes.
</p>

<p>
If you have a listener method on a page that changes the engine's locale, it is necessary to activate a <em>different</em>
page to render the response.  This new page will be loaded in the new locale.
</p>

<note>
This may be addressed somewhat in Tapestry 3.1.  Two options are possible: a service for
changing the locale before rendering a page, and a way to force Tapestry to re-load a page, in a new
locale.
</note>
      
    </section>
  </body>
</document>
<?xml version="1.0"?>
<!-- 
   Copyright 2005 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "./dtd/document-v12.dtd"
[
	<!ENTITY projectroot '../'>
	<!ENTITY % links.ent SYSTEM "../links.ent">
  <!ENTITY % common.ent SYSTEM "common.ent">
	%links.ent;
  %common.ent;
]>
<document>
  <header>
    <title>Input Validation</title>
  </header>

<body>

<p>
  The tapestry validation system provides a very powerful means of validating data intuitively on most
  of the form element components, such as &TextField;, &TextArea;, &Checkbox;, and so forth.  All of these
  components implement the interface
  <link href="&apiroot;/form/IFormComponent.html">IFormComponent</link>, and include the necessary hooks to fit into
  the overall validation framework.
</p>
<p>
  Localization, server-side, and client side validation are handled by the framework,
  as well as the ability to extend or override most of the built in functionality to suit your purposes as
  you see fit.
</p>

  <p>
    Validation has evolved over time (the first attempt at proper validation using Tapestry occured back in 2001).
    Through Tapestry 3, validation was limited to the &ValidField; component (which is now deprecated).
    For Tapestry 4, the APIs related to validation were effectively rewritten, resulting in a more powerful, more
    extensible approach that can be used with all kinds of form element components. 
  </p>

<section id="validation.fieldlabel">
  <title>FieldLabel component</title>
  <p>
Generally speaking, every form input component (&TextField;, etc.) will be paired with a &FieldLabel; component.
The FieldLabel is responsible for generating the HTML &lt;label&gt; element, which is extremely effective for
accessible user interfaces (user interfaces that work for people with visual disabilities).  Typical usage:
  </p>
  
<source><![CDATA[
<tr>
   <td><label jwcid="@FieldLabel" field="component:userName">User Name</label></td>
   <td><input jwcid="userName@TextField" value="ognl:userName" validators="validators:required" displayName="User Name" size="30"/>
</tr>
]]></source>  
  
 
  <p>
    At runtime, this may render as:
  </p> 
 
  <source><![CDATA[
<tr>
   <td><label for="userName">User Name</label></td>
   <td><input name="userName" id="userName" value="" size="30"/>
</tr>
]]></source> 
  
  <p>
    However, this is not all there is to FieldLabel.  An important part of validation is <em>decoration</em> of fields, to mark
    when they contain errors.  This is one of the responsibilities &IValidationDelegate; ... decorating fields and labels.
  </p>  
  
  <p>
    If the above form is submitted without specifying a user name, the userName field will be in error. The page will be redisplayed
    to show the user the error message and the decorated fields and labels.  The <em>default</em> decoration is primitive, but effective:
  </p>
  
  
  <source><![CDATA[
<tr>
   <td><font color="red"><label for="userName">User Name</label></font></td>
   <td><input name="userName" id="userName" value="" size="30"/>&nbsp;<font color="red">**</font>
</tr>
]]></source> 
  
  <p>
   By subclassing the default implementation of &IValidationDelegate; (the &ValidationDelegate; class), you can change how these
   decorations are rendered. It then becomes a matter of providing this custom validation delegate to the &Form; component, via
   its delegate parameter. This is covered in more detail shortly.
  </p>
  
  </section> <!-- validation.fieldlabel -->
  
  <section id="validation.fields">
    <title>Field validation</title>
    
    <p>
      Validation for form element components, such as &TextField;, is controlled by two common component parameters
      provided by all such components: validators and displayName.
    </p>
    
    <p>
      The validators parameter provides a list of validator objects, objects that implement the &Validator; interface.
      Why a list?  Unlike Tapestry 3 validation, each individual validator checks just a single <em>constraint</em>.
      Contraints are things like minimum string length, maximum string length, minimum numeric  value, etc.  This is a very fine
      grained approach, and one that is easily extensible to new contraints.
    </p>
    
    <p>
      The displayName parameter is used to provide the label for the component (perhaps some day, this parameter will be renamed to "label"; why
      it has such a cumbersome name has been forgotten). In any case, this label is used by the matching &FieldLabel; component,
      and is also incorporated into an error messages created for the component.
    </p>
    
  <section id="validation.validators">
    <title>validators: binding prefix</title>

    
    <p>
      The validators: binding prefix is a powerful shorthand for
      constructing a list of configured &Validator; objects. It allows a very declarative style; for
      example, to state that a field is required with a minimum length of four characters,
      the following parameter binding could be used (in a page or component specification): 
      </p>
    <source><![CDATA[
<binding name="validators" value="validators:required,minLength=4"/>    
    ]]></source>
    
    <p>
      Notice that the actual type of the data isn't specified in this instance, it is implied by which parameters
      you specify. A specification is a comma-seperated list of entries. Each entry is in one of the following forms:
    </p>
    
    <ul>
      <li><em>name</em></li>
      <li><em>name</em>=<em>value</em></li>
      <li><em>name[<em>message</em>]</em></li>
      <li><em>name</em>=<em>value</em>[<em>message</em>]</li>
      <li>$<em>name</em></li>
    </ul>
    
    <p>
      Most validator classes are <em>configurable</em>: they have a property that matches their
      name. For example, <link href="&apiroot;/form/validator/MinDate.html">MinDate</link> (which is named "minDate"
      has a <code>minDate</code> property. A few validators are not configurable ("required" =>
      <link href="&apiroot;/form/validator/Required.html">Required</link>, for example).
    </p>
    <p>
      Validators are expected to have a public no-args constructor. They are also expected to have a
      <code>message</code> property which is set from the value in brackets.
      The message is either a literal string, or may be prefixed with a '%' character, to indicate
      a localized key, resolved using the component's message catalog.
    </p>
    <p>
      When the name is prefixed with a dollary sign, it indicates a reference to a &spec.bean;
      with the given name.
    </p>
    <p>
      A full validator specification might be:
      <code>required,email[%email-format],minLength=20[Email addresses must be at least 20 characters long.]</code>
    </p>
    
    <p>
      Here is a partial list of the validator classes provided and their configurable attributes.
    </p>
    <fixme author="Jesse Kuhnert">
      Fill in all of the possible attributes started in the table below.
    </fixme>
    <table>
      <tr>
        <th>&Validator;</th>
        <th>attributes</th>
      </tr>
      <tr>
        <td><link href="&apiroot;/form/validator/BaseValidator.html">BaseValidator</link></td>
        <td><code>message</code></td>
      </tr>
      <tr>
        <td><link href="&apiroot;/form/validator/Email.html">Email</link></td>
        <td><code>none, uses standard email regexp "^\\w[-._\\w]*\\w@\\w[-._\\w]*\\w\\.\\w{2,6}$"</code></td>
      </tr>
      <tr>
        <td><link href="&apiroot;/form/validator/Max.html">Max</link></td>
        <td><code>max=&lt;maximum value, 10&gt;</code></td>
      </tr>
      <tr>
        <td><link href="&apiroot;/form/validator/MaxDate.html">MaxDate</link></td>
        <td><code>maxDate=&lt;maximum date, 06/09/2010&gt;</code></td>
      </tr>
      <tr>
        <td><link href="&apiroot;/form/validator/MaxLength.html">MaxLength</link></td>
        <td><code>maxLength=&lt;maximum length, 23&gt;</code></td>
      </tr>
      <tr>
        <td><link href="&apiroot;/form/validator/Min.html">Min</link></td>
        <td><code>min=&lt;minimum value, 0.718&gt;</code></td>
      </tr>
      <tr>
        <td><link href="&apiroot;/form/validator/MinDate.html">MinDate</link></td>
        <td><code>minDate=&lt;minimum date, 04/23/05&gt;</code></td>
      </tr>
      <tr>
        <td><link href="&apiroot;/form/validator/MinLength.html">MinLength</link></td>
        <td><code>minLength=&lt;minmum length, 15&gt;</code></td>
      </tr>
    </table>
    
    <fixme author="Jesse Kuhnert">
      Examples!
    </fixme>
    
    <fixme author="Jesse Kuhnert">
      Write about how the validation constraints specified with the above syntax are universally
      applied on both the client and server-side, as well as how to override the default behaviour
      for displaying client-side validation messages via subclassing the Tapestry.default_invalid_field_handler
      javascript prototyped method.
    </fixme>
    
  </section> <!-- validation.validators -->
  
  </section> <!-- validation.fields -->
    
    
  <section id="validation.delegate">
      <title>Extending ValidationDelegate</title>    
   
   <p>
      There are a lot of scenerios where you may wish to do something more than that provided by the 
      default, like apply a CSS class to labels in error, or even provide the ability to render the error 
      message directly in or around the label or field.
      </p>
      
      <p>
      Below is a typical subclass of ValidationDelegate that provides more application-specific decorations:
      </p>
      
      <source><![CDATA[
/**
 * Provides more intelligent validation delegate support.
 */
public class MyValidationDelegate extends ValidationDelegate {

/**
 * This method is overwritten so that the error message generated during 
 * server-side validation actually appears next to the field in question.
 *
 * Don't be confused by the method names, there is a complimenting writeSuffix
 * for fields, as well as a pair of writeLabelSuffix/writeLabelPrefix methods to
 * do the same to labels.
 * {@inheritDoc}
 */
 public void writePrefix(IMarkupWriter writer, IRequestCycle cycle, 
         IFormComponent component, IValidator validator)
 {
     IFieldTracking ft = getCurrentFieldTracking();
     //there is a default error renderer for fields which simply
     //writes the message, which is what we want to have happen in this case
     if (ft != null && ft.getErrorRenderer() != null) 
         ft.getErrorRenderer().render(writer, cycle);
 }
 
 /**
  * Adds a class style attribute to the label if in error
  * {@inheritDoc}
  */
 public void writeLabelAttributes(IMarkupWriter writer, IRequestCycle cycle, IFormComponent component) {
      if (isInError(component))
      {
         writer.attribute("class", "labelError");
      }
 }
 
 }]]></source>
  </section> <!-- validation.delegate -->
  
  
  <section id="validation.validfield">
    <title>ValidField component</title>
    <warning >
      The ValidField component and it's associated validators under org.apache.tapestry.valid should be considered
      deprecated in favor of the new system found under org.apache.tapestry.form.validator. 
    </warning>
    
    <section id="validation.validator-binding">
      <title>validator: binding prefix </title>
      
      <p>
        For &ValidField;, validation is specified through a single parameter, validator.  
        The validator parameter is an object that implements the &IValidator; interface. In Tapestry 3.0, it was necessary to
        provide a configured Java object as the validator, using Java code, or
        the specification's &lt;bean&gt; element.
      </p>
      
      <p>
        Although the ValidField component is deprecated in release 4.0 (and likely to be removed in a later release),
        some legacy support for ValidField was added in release 4.0 ... a special binding prefix, "validator:", that streamlines
        the process of assembling a validator object for the validator parameter. 
      </p>
      
      <p>The validator: <link href="bindings.html">binding prefix</link> is a powerful shorthand for specifying validators.
        The string provided does two things:  it identifies (by a short logical name) the Java class of the validator to create, and
        it specifies (as a comma seperated list) the properties of the validator to set.   The form of the string is:
      </p>
      
      <source>
        validator:<em>name</em>[,<em>property</em>[=<em>value</em>]]*
      </source>
      
      <p>
        The name corresponds to contributions to the tapestry.valid.Validators configuration point.  After the name is a list of properties to set.
        A simple conversion from string value to actual data type is performed.  For boolean properties, the value can be skipped and will default to true. 
        Alternatively, the value can be prefixed with an exclamation point, and the property will be set to false.  Example:
      </p>
      
      <source>
        validator:string,required,minimumLength=5
      </source> 
      
      <p>
        In some cases, this is insufficiently powerful to set the properties of the validator instance, in which case the &spec.bean; element can be used
        instead.
      </p> 
      
      <p>
        The following validator names are defined:
      </p>
      
      <table>
        <tr>
          <th>Name</th>
          <th>&IValidator; implementation class</th>
        </tr>
        <tr>
          <td>string</td> <td><link href="&apiroot;/valid/StringValidator.html">StringValidator</link></td>
        </tr>
        <tr>
          <td>date</td>
          <td><link href="&apiroot;/valid/DateValidator.html">DateValidator</link></td>
        </tr>
        <tr>
          <td>email</td>
          <td><link href="&apiroot;/valid/EmailValidator.html">EmailValidator</link></td>
        </tr>
        <tr>
          <td>url</td> 
          <td><link href="&apiroot;/valid/UrlValidator.html">UrlValidator</link></td>
        </tr>
        <tr>
          <td>int</td>
          <td><link href="&apiroot;/valid/IntValidator.html">IntValidator</link></td>
        </tr>
      </table>
      
    </section> <!-- validation.validfield -->
  </section> <!-- validation.validfield -->
  

</body>
</document>
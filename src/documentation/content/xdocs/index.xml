<?xml version="1.0"?>
<!-- 
   Copyright 2004, 2005 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "./dtd/document-v12.dtd" [

<!ENTITY % links.ent SYSTEM "./links.ent">
%links.ent;
]>
<document>

 <header>
  <title>Jakarta Tapestry</title>
 </header>

<body>
  
  <section>
    <title>Quick Links</title>
  
<p>
Quick links to the most common subjects:
</p>

<p>
  
  <link href="UsersGuide/index.html">User's Guide</link>
  -
  <link href="QuickStart/index.html">Quick Start Tutorial</link>
  -
  <link href="tapestry/ComponentReference/index.html">Component Reference</link>
  -
  <link href="tapestry/apidocs/index.html">JavaDoc</link>
  -
  <link href="site:faq">FAQ</link>
  -
  <link href="downloads.html"><strong>Downloads</strong></link>  
  -
  <link href="site:wiki">Wiki</link>
  -
  <link href="http://issues.apache.org/jira/secure/BrowseProject.jspa?id=10573">JIRA</link> (issue tracking)
</p>  
  
    
  </section>
  

<section>
  <title>What is Tapestry?</title>

<p>
Tapestry is an open-source framework for creating dynamic, robust, highly scalable web applications in Java.
Tapestry complements and builds upon the standard Java Servlet API, and so it works in any servlet container
or application server.
</p>

<p>
Tapestry divides a web application into a set of pages, each constructed from components. This provides a consistent structure, allowing the Tapestry framework to 
assume responsibility for key concerns such as URL construction and dispatch, persistent state storage
on the client or on the server, user input validation, localization/internationalization, and exception reporting. Developing Tapestry applications involves creating HTML templates using plain HTML, and combining the templates with small amounts of Java code using (optional) XML descriptor files. In Tapestry, you create your
application in terms of objects, and the methods and properties of those objects -- and specifically <em>not</em>
 in terms of URLs and query parameters. Tapestry brings true object oriented development
 to Java web applications.
</p>

<p>Tapestry is specifically designed to make creating new components very easy, as this is a routine approach when building applications. The distribution includes over fifty components, ranging from simple output components all the way up to complex data grids and tree navigators.
</p>

<p>Tapestry is architected to scale from tiny applications all the way up to massive applications consisting of hundreds of individual pages, developed by large, diverse teams. Tapestry easily integrates with any kind of backend, including J2EE, HiveMind and Spring.
</p>


<p>
Tapestry is released under the Apache Software Licence 2.0.
</p>		

</section>

<section>
  <title>What is Tapestry's philosophy?</title>
<p>
Tapestry is organized around four key principles:
</p>

<ul>
  <li>Simplicity - web applications shouldn't be rocket science!</li>
  <li>Consistency - what works in pages should work in components. What works in small applications should work in large
    applications. Different developers should find similar solutions to similar problems.</li>
    <li>Efficiency - applications should be performant and scalable</li>
    <li>Feedback - when things go wrong, the framework should not get in the way; in fact, it should provide
      useful diagnostics</li>
</ul>

<p>
  These four principles drive the meta-principle: <em>The simplest choice should be the correct choice.</em> The decisions you make early in a project
  should not come back later to haunt you.
</p>

<p>
  We have found that a component approach to web development 
  is the best way of realizing these principles. Structuring
  the framework and your application around components makes it possible to move all the boring
  plumbing  code out of your application and into the framework.  You write less code, you write simpler code,
  sometimes you write <em>no</em> code. Tapestry picks up the slack.
</p>

</section>



<section>
  <title>Tapestry 4.0</title>
  
<p>
Tapestry 4.0 is just overflowing with new features aimed at further enhancing 
your productivity. Here's a few of our favorites:
</p>  

<ul>
  <li>
  The new 4.0 specification DTDs have been simplified.    
  </li>
  <li>
    The syntax used for binding parameters inside an HTML template and inside
    an XML specification is now consistent. Both make use of the binding prefixes.
  </li>
  <li>
    "Friendly" URLs (that is, URLs that pack more information into the path and less into query
    parameters) are built in. This makes it easy to divide your application across many folders (reducing
    clutter),
    and leverage J2EE declarative security along the way.
  </li>
  <li>
    Listener methods are much easier and more flexible; listener parameters in the URL 
    are automatically mapped to
    listener method parameters, and listener methods can return the page name or page instance
    to activate.
  </li>
  <li>
    Component parameters now <em>just work</em>, without having to worry about
    "direction". 
  </li>
  <li>
    Applications can now have a global message catalog, in addition to per-page and per-component
    message catalogs. Messages not found in the component message catalog are searched for in the 
    application catalog.
  </li>
  <li>
    Full, native support for <link href="tapestry-portlet/index.html">developing JSR-168 Portlets</link> has been added.
  </li>
  <li>
    Tapestry 4.0 makes much less use of reflection and &OGNL; than Tapestry 3.0; partly
    because there are many new <link href="UsersGuide/bindings.html">binding prefixes</link> and largely
    because of how parameters are now implemented.
  </li>
  <li>
   HiveMind services and &Spring; beans can be directly injected
    into page and component classes.
  </li>
  <li>
    Tapestry 4.0 includes optional <link href="tapestry-annotations/index.html">JDK 1.5 annotation support</link> 
    (but Tapestry still works with <link href="dependencies.html">JDK 1.3</link>).
  </li>
  <li>
    Tapestry 4.0 debuts a new and much more sophisticated user input validation subsystem.  Thanks Paul!
  </li>
  <li>
    Line precise error reporting can now display the contents of files containing errors.
  </li>
  <li>
    Forms can now be canceled, bypassing client-side validation logic, and invoking an  alternate
    listener on the server-side.
  </li>
  <li>
    You are no longer limited to just Global and Visit; you can have as many
    <link href="UsersGuide/state.html#state.aso">application state objects</link> as you like.
  </li>
  <li>
    The use of &HiveMind; under the covers means that Tapestry can be easily customized to fit your needs.
  </li>
  <li>
    Page properties can now be persisted on the client, as well as in the session.
  </li>
  <li>
    Components and component parameters can now be marked as deprecated. Component parameters may
    have aliases (used when renaming a parameter).
  </li>
</ul>

<p>
The complete list of changes is almost too numerous to enumerate.  Suffice to say, everything is about
getting more bang for the buck, and reducing the amount of Java code, reducing the complexity
of templates, and simplifying (or eliminating) XML files.
</p>

</section>

<section>
  <title>Status</title>
  
<p>
Work on Tapestry 4.0 is in full swing.  Documentation is being converted
from the old DocBook format, to the new Forrest format, leaving many temporary gaps. 
 A new <link href="QuickStart/index.html">Quick Start</link> series
of tutorials is being written.
</p>

<p>
  Tapestry 4.0 is nearing the end of its beta cycle; new features are being deferred
  to Tapestry 4.1 and the emphasis is on filling gaps in the documentation
  and fixing bugs. A final release for Tapestry 4.0 is expected (but not guaranteed)
  in October 2005.
</p>

</section>
  
<section><title>Upgrading from 4.0 beta-10</title>
    
   <p>
      The way <link href="UsersGuide/friendly-urls.html">friendly URLs</link> are configured,
      for the asset service, has changed between beta-10 and later releases.  In your
      hivemodule.xml, change:

    
    <code><![CDATA[<asset-encoder id="asset" path="/assets/"/>]]></code> to
    <code><![CDATA[<asset-encoder id="asset" path="/assets"/>]]></code>
    (notice that the trailing slash has been removed).
    </p>
    
</section>    


<section>
  <title>Upgrading from Tapestry 3.0</title>
  
  
<p>
  Tapestry 4.0 features a large number of new features, and is some limited cases, backwards compatibility
  has been compromised.  <link href="site:upgrade">Full details</link> are forthcoming, but in general:
</p>  

<ul>
  <li>Tapestry 3.0 page and component specifications are still honored</li>
  <li>Page and component templates have not changed</li>
</ul>

<p>
Things that will cause you trouble when upgrading:
</p>

<ul>
  <li>Defining engine services has changed entirely, as has the IEngineService API</li>
  <li>Subclassing BaseEngine to override exception handling has changed; it is now about
    creating and contributing new HiveMind services to override the default behavior.</li>
  <li>
    Parameter direction "custom" is no longer really supported. Defining a parameter
    always creates a corresponding property.
  </li>
  <li>
    The <em>parameterName</em>Binding property is no longer created for each parameter,
    instead you must use the getBinding() method.
  </li> 
   <li>
    The relationship between the page loader and the specification delegate has changed;
    the specifications provided by the delegate are now cached by the loader (in 3.0,
    the delegate was responsible for caching).
   </li>
   <li>The Jakarta commons-lang library is no longer a dependency of Tapestry; this means
    that the EnumPropertySelectionModel class is no longer available (however, you can easily
    copy the source from Tapestry 3.0). </li>
</ul>

  
</section>

<section>
		<title>Tapestry in Print</title>


<figure src="images/tapestry-in-action.png" alt="Tapestry in Action Cover"/> 
<p>
	Tapestry in Action
is now available from
<link href="http://www.manning.com/lewisship/index.html">Manning Publications</link>. It is the
definitive introduction to Tapestry written by Howard Lewis Ship, the creator of Tapestry. Tapestry In Action
covers Tapestry 3.0, but is still broadly useful in the wake of the 4.0 release.
</p>

<figure src="images/ewdt_tong_cover.jpg" alt="Enjoy Web Development with Tapestry Cover"/>

<p>
  <link href="http://www.agileskills2.org/EWDT/">Enjoy Web Development with Tapestry</link> by Kent Tong covers
  Tapestry 4.0 (as well as 3.0) and is available in PDF and hard-copy formats.
</p>

<figure src="images/tapestry-german-cover.gif" alt="Tapestry Webanwendungen mit dem Apache Framework"/>

<p>
<link href="http://entwickler.com/sus/sus_buch/psecom,id,60,nodeid,8,_language,uk.html">Tapestry Webanwendungen mit dem Apache Framework</link> is a fast-paced guide to using
Tapestry, focusing on combining Tapestry with other open-source frameworks, as well as developing Tapestry applications using
<link href="http://spindle.sourceforge.net/">Spindle</link>. The book is written in German, and authored by
Stefan Edlich and Patrick Kunert.  Covers Tapestry 3.0.
</p>

<p>Tapestry has also  been described in the print journal 
<em>The Java Report</em> in the September 2001 issue.  Other articles
includes the on-line journal
<link href="http://www.onjava.com/pub/a/onjava/2001/11/21/tapestry.html">OnJava</link>,
in November 2001.
</p>

</section>

<section>
		<title>Tapestry Community</title>


<p>
Tapestry has a very active 
<link href="mailto:tapestry-user-subscribe@jakarta.apache.org">User</link> mailing list, with
<link href="http://news.gmane.org/thread.php?group=gmane.comp.java.tapestry.user">archives</link>.
This is the list for getting help with using the framework.
</p>

<p>
The <link href="mailto:tapestry-dev-subscribe@jakarta.apache.org">Developer</link>
mailing list is for Tapestry committers and other power users to discuss
enhancements to the framework.  It also has 
<link href="http://news.gmane.org/thread.php?group=gmane.comp.jakarta.tapestry.devel">archives</link>.

</p>

<p>
A <link href="site:wiki">Wiki</link> has been set 
up to discuss Tapestry and plan new features, as well as provide a list
of <link href="http://wiki.apache.org/jakarta-tapestry/TapestryTutorials">Tapestry tutorials.</link>
</p>

</section>

<section>
  <title>Tapestry Support</title>
  
<figure src="images/tsn-logo.png" alt="Tapestry Support Network"/>

<p>
  The <link href="http://tapestrysupport.com">Tapestry Support Network</link> is a consortium of professional
  software trainers and consultants that provide customized Tapestry training and teir-one support. The network includes
  key players in the Tapestry world, including Howard Lewis Ship and Erik Hatcher, as well as other organizations, including
  Interface21 and ArcMind.
</p>

</section>

</body>
</document>

<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2007 The Apache Software Foundation

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN"
        "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
    <properties>
        <title>Development Guide - Rounded Corner Service</title>
    </properties>
    <body>

        <section name="Rounded Corners Service">
            <p>
                As of version 4.1.2 of Tapestry a new Rounded Corner generator service is now available for you to use
                as a convenience for generating various types of images that are easily referencable in your CSS and html
                templates. 
            </p>

            <p>
                The original inspiration for this service is based around the article on ajaxian.com which outlines the
                <a href="http://ajaxian.com/archives/googles-rounded-corner-generator">Google Rounded Corner Generator</a> service
                used by some of the google web services to construct UIs.
            </p>

            <img src="../../images/developmentguide/rounded-top-right-orange.gif" alt="Orange Rounded Corner Example" />
            <img src="../../images/developmentguide/rounded-bottom-left-green.gif" alt="Green Rounded Corner Example" />
            <img src="../../images/developmentguide/rounded-top-left-blue.gif" alt="Blue Rounded Corner Example" />
            <img src="../../images/developmentguide/rounded-bottom-right-red.gif" alt="Red Rounded Corner Example" />

            <p>
                The basic idea behind the service is that it lets you write really simple / definable URL strings generate the images.
                For instance - the orange corner listed above was generated with a URL like: 
            </p>

<source><![CDATA[./rounded?c=FF9900&bc=white&w=60&h=60&a=tr&sw=3&o=.5
]]></source>

            <p>
                There are actually a lot more options than just generating rounded corners.  If you look at the images listed above you'll notice
                that they additionally have drop shadows generated. 
            </p>

        </section>

        <section name="Rounded Corner Parameters">
            <table>
                <tr>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Required</th>
                    <th>Default</th>
                    <th>Description</th>
                </tr>
                <tr>
                    <td>c</td>
                    <td>
                        Hex string <br />
                        or <br />
                        any <a href="http://www.w3.org/TR/REC-CSS2/syndata.html#color-units">css2</a> color name.
                    </td>
                    <td>yes</td>
                    <td> </td>
                    <td>
                        Primary color of the generated image.  Can be any standard hex string - such as <code>FF9900</code> or any
                        of the 16 standard css2 colors defined in the <a href="http://www.w3.org/TR/REC-CSS2/syndata.html#color-units">w3 css2 spec</a>.

                        <br /><br />
                        <strong>CSS2 Color names:</strong> aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow
                    </td>
                </tr>
                <tr>
                    <td>bc</td>
                    <td>
                        Hex string <br />
                        or <br />
                        any <a href="http://www.w3.org/TR/REC-CSS2/syndata.html#color-units">css2</a> color name.
                    </td>
                    <td>no</td>
                    <td>transparent</td>
                    <td>
                        Background color of the generated image.  Can be any standard hex string - such as <code>FF9900</code> or any
                        of the 16 standard css2 colors defined in the <a href="http://www.w3.org/TR/REC-CSS2/syndata.html#color-units">w3 css2 spec</a>.

                        <br /><br />
                        <strong>CSS2 Color names:</strong> aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow

                        <span class="warn">
                            <strong>Warning:</strong>
                            <p>
                                If you don't specify a background color for your image the service will render the image with a transparent background and serve the
                                image as type <code>image/png</code>.  While this does provide additional flexibility please keep in mind that most Internet Explorer browsers
                                are incapable of rendering PNG images.
                            </p>
                        </span>
                    </td>
                </tr>
                <tr>
                    <td>w</td>
                    <td>
                       pixels
                    </td>
                    <td>yes</td>
                    <td> </td>
                    <td>
                        Specifies the width of the generated image.  Can be simple numbers like <code>10</code> for 10 pixels or more precise such as
                        <code>5.16</code> pixels.
                    </td>
                </tr>
                <tr>
                    <td>h</td>
                    <td>
                        pixels
                    </td>
                    <td>yes</td>
                    <td> </td>
                    <td>
                        Specifies the height of the generated image in pixels.
                    </td>
                </tr>
                <tr>
                    <td>a</td>
                    <td>
                        One of:[tl,tr,bl,br]
                    </td>
                    <td>yes</td>
                    <td> </td>
                    <td>
                        The angle of the corner you would like to generate.  <code>tl=Top Left</code>,  <code>tr=Top Right</code>,  <code>bl=Bottom Left</code>,  <code>br=Bottom Right</code>
                    </td>
                </tr>
                <tr>
                    <td>sw</td>
                    <td>
                        pixels
                    </td>
                    <td>no</td>
                    <td> </td>
                    <td>
                        If you would like the corner to also have a drop shadow this parameter controls the relative width in pixels of the generated drop shadow effect around the outer
                        edges of your corner.
                    </td>
                </tr>
                <tr>
                    <td>o</td>
                    <td>
                        percent
                    </td>
                    <td>no</td>
                    <td>0.5</td>
                    <td>
                        Controls the opacity of the generated drop shadow when used in conjunction with the <code>sw</code>(shadow width) parameter.   
                    </td>
                </tr>
            </table>
        </section>

        <section name="Side Shadow Parameters">
            <p>
                There are two additional types of images this service can generate - one of these is buidling straight side shadows.
            </p>

<source><![CDATA[<style type="text/css">
.side {
    background: url('/rounded?s=right&sw=2') repeat-y right;
    padding-right: 10px;
}
</style>]]></source>

            <style type="text/css">
                .side {
                    background: url('../../images/developmentguide/side-shadow.png') repeat-y right;
                    padding-right: 10px;
                }
            </style>

            <p><strong>Example:</strong></p>
            <span class="side">This has a side shadow.</span>
            <p> </p>
            
            <table>
                <tr>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Required</th>
                    <th>Default</th>
                    <th>Description</th>
                </tr>
                <tr>
                    <td>s</td>
                    <td>
                        One of: [left, right, top, bottom]
                    </td>
                    <td>yes</td>
                    <td> </td>
                    <td>
                        The side to generate the side shadow for.
                    </td>
                </tr>
                <tr>
                    <td>sw</td>
                    <td>
                        pixels
                    </td>
                    <td>no</td>
                    <td> </td>
                    <td>
                        This parameter controls the relative width in pixels of the generated drop shadow effect.
                    </td>
                </tr>
                <tr>
                    <td>o</td>
                    <td>
                        percent
                    </td>
                    <td>no</td>
                    <td>0.5</td>
                    <td>
                        Controls the opacity of the generated drop shadow when used in conjunction with the <code>sw</code>(shadow width) parameter.
                    </td>
                </tr>
            </table>
        </section>

        <section name="Whole Shadow Parameters">
            <p>
                Entire areas can also be generated with a shadow effect coming out in the bottom right.  This particular image generation is still
                slightly inflexible in all available options but should suffice for the majority of simple circumstances.
            </p>

<source><![CDATA[<style type="text/css">
.detail {
    display:block;
    margin-top:2em;
    padding: 0 1.1em 2em;
    background: url("rounded?c=white&bc=white&w=600&h=40&shadow=true&ah=10&aw=10&sw=4&o=.5") left bottom no-repeat;
}
</style>]]></source>

            <style type="text/css">
                .detail {
                    display:block;
                    margin-top:2em;
                    padding: 0 1.1em 2em;
                    background: url('../../images/developmentguide/whole-shadow.gif') left bottom no-repeat;
                }
            </style>

            <p><strong>Example:</strong></p>
            <div class="detail">
                This is a detail block of text surrounded with a drop shadow.
            </div>

            <table>
                <tr>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Required</th>
                    <th>Default</th>
                    <th>Description</th>
                </tr>
                <tr>
                    <td>c</td>
                    <td>
                        Hex string <br />
                        or <br />
                        any <a href="http://www.w3.org/TR/REC-CSS2/syndata.html#color-units">css2</a> color name.
                    </td>
                    <td>yes</td>
                    <td> </td>
                    <td>
                        Primary color of the generated image.  Can be any standard hex string - such as <code>FF9900</code> or any
                        of the 16 standard css2 colors defined in the <a href="http://www.w3.org/TR/REC-CSS2/syndata.html#color-units">w3 css2 spec</a>.

                        <br /><br />
                        <strong>CSS2 Color names:</strong> aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow
                    </td>
                </tr>
                <tr>
                    <td>bc</td>
                    <td>
                        Hex string <br />
                        or <br />
                        any <a href="http://www.w3.org/TR/REC-CSS2/syndata.html#color-units">css2</a> color name.
                    </td>
                    <td>yes</td>
                    <td> </td>
                    <td>
                        Background color of the generated image.  Can be any standard hex string - such as <code>FF9900</code> or any
                        of the 16 standard css2 colors defined in the <a href="http://www.w3.org/TR/REC-CSS2/syndata.html#color-units">w3 css2 spec</a>.

                        <br /><br />
                        <strong>CSS2 Color names:</strong> aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow
                    </td>
                </tr>
                <tr>
                    <td>w</td>
                    <td>
                       pixels
                    </td>
                    <td>yes</td>
                    <td> </td>
                    <td>
                        Specifies the width of the generated image.  Can be simple numbers like <code>10</code> for 10 pixels or more precise such as
                        <code>5.16</code> pixels.
                    </td>
                </tr>
                <tr>
                    <td>h</td>
                    <td>
                        pixels
                    </td>
                    <td>yes</td>
                    <td> </td>
                    <td>
                        Specifies the height of the generated image in pixels.
                    </td>
                </tr>
                <tr>
                    <td>aw</td>
                    <td>
                       pixels
                    </td>
                    <td>yes</td>
                    <td> </td>
                    <td>
                        Specifies the arc width of the generated image in pixels.
                    </td>
                </tr>
                <tr>
                    <td>ah</td>
                    <td>
                        pixels
                    </td>
                    <td>yes</td>
                    <td> </td>
                    <td>
                        Specifies the arc height of the generated image in pixels.
                    </td>
                </tr>
                <tr>
                    <td>sw</td>
                    <td>
                        pixels
                    </td>
                    <td>yes</td>
                    <td> </td>
                    <td>
                        This parameter controls the relative width in pixels of the generated drop shadow effect around the outer
                        edges of your corners.
                    </td>
                </tr>
                <tr>
                    <td>o</td>
                    <td>
                        percent
                    </td>
                    <td>no</td>
                    <td>0.5</td>
                    <td>
                        Controls the opacity of the generated drop shadow when used in conjunction with the <code>sw</code>(shadow width) parameter.
                    </td>
                </tr>
            </table>
        </section>

        <section name="HiveMind / web.xml Configuration">
            <p>
                The <a href="http://opencomponentry.com:8080/timetracker/LocaleList.html">TimeTracker</a> demo application is probably the best example
                of configuring this service and using it in an application. 
            </p>

            <p>
                There isn't a whole lot to configuring the service, but it will require that you have a <code>hivemodule.xml</code> hivemind configuration
                file set-up in your project's <code>WEB-INF/</code> directory.  The TimeTracker demo application has a hivemodule.xml definition looking like:
            </p>

<source><![CDATA[
<?xml version="1.0"?>
<module id="timetracker" version="1.0.0" package="org.apache.tapestry.timetracker">

    <contribution configuration-id="tapestry.url.ServiceEncoders">
        <asset-encoder id="asset" path="/assets" />
        <extension-encoder id="extension" extension="svc" after="*"/>
        <direct-service-encoder id="direct" stateless-extension="direct" stateful-extension="sdirect"/>
        <page-service-encoder id="page" extension="html" service="page"/>

        <!-- This is key - maps /rounded servlet path requests to the rounded corner service -->
        <path-encoder id="rounded" path="/rounded" service="rounded" />
    </contribution>
    
</module>
]]></source>

            <p>
                The key addition to the file is the use of the new path-encoder service in what is probably the standard hivemined setup that
                most people already configured to take advantage of <a href="../../usersguide/friendly-urls.html">friendly urls</a>. 
            </p>

<source><![CDATA[<path-encoder id="rounded" path="/rounded" service="rounded" />]]></source>

            <p>
                The only other addition you'll want to make is to configure your web.xml servlet mapping section to include the
                new <code>path="/rounded"</code> configuration you just added to your hivemodule.xml:
            </p>

<source><![CDATA[..
<servlet-mapping>
    <servlet-name>timetracker</servlet-name>
    <url-pattern>/rounded</url-pattern>
</servlet-mapping>
]]></source>

        </section>

        <section name="Caching">
            <p>
                By default the rounded corner service handles all of the necessary http caching header logic in addition to caching the generated
                images on the server side - so the service and the images it generates should be more than scalable enough to fit the majority of
                asset serving needs of most applications.
            </p>
        </section>
    </body>
</document>

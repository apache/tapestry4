<?xml version="1.0"?>
<!-- 
   Copyright 2004 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<module id="tapestry" version="3.1.0">

  The master module for the Apache Tapestry web application framework.  This is growing rapidly 
  and will likely split into a number of sub modules.
  
  <service-point id="MasterInitializer" interface="org.apache.tapestry.services.ApplicationInitializer">
    
    Master startup for the application; invokes an ordered series of other ApplicationInitializer instances contributed to
    the ApplicationInitializers configuration point.
    
    <invoke-factory>
      <construct class="org.apache.tapestry.services.impl.MasterInitializer">
        <set-configuration property="initializers" configuration-id="ApplicationInitializers"/>
      </construct>
    </invoke-factory>
  </service-point>

  <configuration-point id="ApplicationInitializers">
  
    An orderable list of ApplicationInitializer services.
    
    <schema>
      <element name="initializer">
        <attribute name="name" required="true">
          A unique id used when ordering the initializers.
        </attribute>
      
        <attribute name="before" translator="id-list">
          A comma-seperated list of the names of initializers that should execute after this initializer.
        </attribute>
      
        <attribute name="after" translator="id-list">
          A comma-seperated list of the names of initializers that should execute before this initializer.
        </attribute>
        
        <attribute name="object" required="true" translator="object">
          The object which implements the ApplicationInitializer interface.
        </attribute>
        
        <conversion class="org.apache.tapestry.services.impl.InitializerContribution">
          <map attribute="object" property="initializer"/>
        </conversion>
      </element>
    </schema>
  </configuration-point>

  <service-point id="ApplicationSpecificationInitializer" interface="org.apache.tapestry.services.ApplicationInitializer">
    
    Locates and parses the application specification and informs the ApplicationGlobals service about it.
    
    <invoke-factory>
      <construct class="org.apache.tapestry.services.impl.ApplicationSpecificationInitializer">
        <set-service property="classpathResourceFactory" service-id="ClasspathResourceFactory"/>
        <set-service property="globals" service-id="ApplicationGlobals"/>
        <set-service property="parser" service-id="SpecificationParser"/>
      </construct>
    </invoke-factory>
  </service-point>
  
  <service-point id="ClasspathResourceFactory" interface="org.apache.tapestry.services.ClasspathResourceFactory">
  
    Constructs new instances of ClasspathResource.
    
    <invoke-factory>
      <construct class="org.apache.tapestry.services.impl.ClasspathResourceFactoryImpl"/>
    </invoke-factory>
  </service-point>
  
  <service-point id="SpecificationParser" interface="org.apache.tapestry.services.SpecificationParser">
    <invoke-factory model="pooled">
      <construct class="org.apache.tapestry.services.impl.SpecificationParserImpl"/>
    </invoke-factory>
    
    <interceptor service-id="hivemind.LoggingInterceptor"/>
  </service-point>
  
  <service-point id="ApplicationGlobals" interface="org.apache.tapestry.services.ApplicationGlobals">
    <create-instance class="org.apache.tapestry.services.impl.ApplicationGlobalsImpl"/>
  </service-point>
  
  <service-point id="ApplicationSpecification" interface="org.apache.tapestry.spec.IApplicationSpecification">
    
    The specification property of ApplicationGlobals as its own service.
    
    <invoke-factory service-id="hivemind.lib.ServicePropertyFactory">
      <construct service-id="ApplicationGlobals" property="specification"/>
    </invoke-factory>
    
  </service-point>
  
  <contribution configuration-id="ApplicationInitializers">
    <initializer name="ApplicationSpecificationInitializer" object="service:ApplicationSpecificationInitializer"/>
  </contribution>
  
  <service-point id="EnginePool" interface="org.apache.tapestry.services.ObjectPool">
    <create-instance class="org.apache.tapestry.services.impl.ObjectPoolImpl"/>
  </service-point>
  
  <service-point id="RequestGlobals" interface="org.apache.tapestry.services.RequestGlobals">
    Stores the request and response for the current thread.
    
    <create-instance class="org.apache.tapestry.services.impl.RequestGlobalsImpl" model="threaded"/>
  </service-point>
  
  <service-point id="RequestGlobalsInitializer" interface="org.apache.tapestry.services.RequestServicerFilter">
    <invoke-factory>
      <construct class="org.apache.tapestry.services.impl.RequestGlobalsInitializer">
        <set-service property="requestGlobals" service-id="RequestGlobals"/>
      </construct>
    </invoke-factory>
  </service-point>
  
  <service-point id="HttpServletRequest" interface="javax.servlet.http.HttpServletRequest">
    
    Exposes the current thread's HttpServletRequest as a service. The request is actually
    stored in the RequestGlobals service.
    
    <invoke-factory service-id="hivemind.lib.ServicePropertyFactory">
      <construct service-id="RequestGlobals" property="request"/>
    </invoke-factory>
  </service-point>
  
  <service-point id="LocaleExtractor" interface="org.apache.tapestry.services.LocaleExtractor">
    
    Encapsulates the logic for extracting the locale for the current request.
    
    <invoke-factory>
      <construct class="org.apache.tapestry.services.impl.LocaleExtractorImpl">
        <set-service property="request" service-id="HttpServletRequest"/>
        <set-service property="cookieSource" service-id="CookieSource"/>
      </construct>
    </invoke-factory>
  </service-point>
  
  
  <service-point id="CookieSource" interface="org.apache.tapestry.services.CookieSource">
    
    Allows access to incoming HTTP cookie values for the active (per-thread) request.
    
    <invoke-factory>
      <construct class="org.apache.tapestry.services.impl.CookieSourceImpl">
        <set-service property="request" service-id="HttpServletRequest"/>
      </construct>
    </invoke-factory>    
  </service-point>
  
  <service-point id="EngineManager" interface="org.apache.tapestry.services.EngineManager">
    Obtains an IEngine implementation for the current request, either from a pool of
    such engine instance, from a factory, or from the HttpSession.
    
    <invoke-factory>
      <construct class="org.apache.tapestry.services.impl.EngineManagerImpl">
        <set-service property="enginePool" service-id="EnginePool"/>
        <set-service property="request" service-id="HttpServletRequest"/>
        <set-object property="servletName" value="service-property:ApplicationGlobals:servletName"/>
        <set-service property="engineFactory" service-id="EngineFactory"/>
        <set-service property="localeExtractor" service-id="LocaleExtractor"/>
      </construct>
    </invoke-factory>
  </service-point>
  
  <service-point id="EngineFactory" interface="org.apache.tapestry.services.EngineFactory">
    
    Responsible for creating new instances of IEngine as needed.
    
    <invoke-factory>
      <construct class="org.apache.tapestry.services.impl.EngineFactoryImpl">
        <set-service property="applicationSpecification" service-id="ApplicationSpecification"/>
        <set-object property="defaultEngineClassName" value="global-property:org.apache.tapestry.engine-class"/>
      </construct>
    </invoke-factory>
    
  </service-point>
  
  <contribution configuration-id="hivemind.FactoryDefaults">
    <default symbol="org.apache.tapestry.engine-class" value="org.apache.tapestry.engine.BaseEngine"/>
    <default symbol="org.apache.tapestry.default-script-language" value="jython"/>
    <default symbol="org.apache.tapestry.visit-class" value="java.util.HashMap"/>
    <default symbol="org.apache.tapestry.output-encoding" value="UTF-8"/>
    <default symbol="org.apache.tapestry.enhance.disable-abstract-method-validation" value="false"/>
    <default symbol="org.apache.tapestry.default-page-class" value="org.apache.tapestry.html.BasePage"/>
  </contribution>
  
  <service-point id="RequestServicerPipeline" interface="org.apache.tapestry.services.RequestServicer">
    
    A pipeline for handling each request.
    
    <invoke-factory service-id="hivemind.lib.PipelineFactory">
      <create-pipeline filter-interface="org.apache.tapestry.services.RequestServicerFilter"
        configuration-id="RequestServicerPipeline"/>
    </invoke-factory>    
  </service-point>
  
  <service-point id="InvokeEngineTerminator" interface="org.apache.tapestry.services.RequestServicer">
    
    Terminator service for the RequestServicerPipeline. This locates an IEngine instance that
    can take control of the request.
    
    <invoke-factory>
      <construct class="org.apache.tapestry.services.impl.InvokeEngineTerminator">
        <set-service property="engineManager" service-id="EngineManager"/>
        <set-object property="specification" value="service-property:ApplicationGlobals:specification"/>
        <set-object property="servlet" value="service-property:ApplicationGlobals:servlet"/>
        <set-service property="infrastructure" service-id="Infrastructure"/>
      </construct>
    </invoke-factory>
    
  </service-point>
  
  <configuration-point id="RequestServicerPipeline" schema-id="hivemind.lib.Pipeline">
    
    A pipeline for processing an incoming request.
    
  </configuration-point>
  
  <contribution configuration-id="RequestServicerPipeline">
    <filter name="RequestGlobalsInitializer" before="*" object="service:RequestGlobalsInitializer"/>
    <terminator object="service:InvokeEngineTerminator"/>
  </contribution>
  
  
  <schema id="PropertySources">
    
      Used to build a list of IPropertySource instances in a specific
      consultation order.
    
      <element name="source">
        
        <attribute name="name" required="true">
          The name of the contribution, used to control ordering.
        </attribute>
        
        <attribute name="before">
          List of sources that should process before this source.
        </attribute>
        
        <attribute name="after">
          List of sources that should process after this source.
        </attribute>
        
        <attribute name="object" translator="object">
          The object or service that implements the IPropertySource interface.
        </attribute>
        
        <conversion class="org.apache.tapestry.services.impl.PropertySourceContribution">
          <map property="source" attribute="object"/>
        </conversion>
        
      </element>

  </schema>
  
  <configuration-point id="GlobalPropertySources" schema-id="PropertySources">
    
    Specifies a sequence of property sources used to resolve global application configuration data, which may
    be in web.xml (servlet init parameters or servlet
    context init parameters), or provided as HiveMind substitution symbol.
    
  </configuration-point>
  
  <service-point id="GlobalPropertySource" interface="org.apache.tapestry.engine.IPropertySource">
    
    Service point for obtaining configuration data resolved using GlobalPropertySources
    configuration point.
    
    <invoke-factory>
      <construct class="org.apache.tapestry.services.impl.PropertySourceImpl">
        <set-configuration property="contributions" configuration-id="GlobalPropertySources"/>
      </construct>
    </invoke-factory>
    
  </service-point>
  
  <service-point id="ServletPropertySource" interface="org.apache.tapestry.engine.IPropertySource">
    
    Searches for properties in the application servlets' configuration.
    
    <invoke-factory>
      <construct class="org.apache.tapestry.services.impl.ServletPropertySource">
        <set-object property="servletConfig" value="service-property:ApplicationGlobals:servletConfig"/>
      </construct>
    </invoke-factory>    
  </service-point>
  
  <service-point id="ServletContextPropertySource" interface="org.apache.tapestry.engine.IPropertySource">
    
    Searches the servlet context for properties.
    
    <invoke-factory>
      <construct class="org.apache.tapestry.services.impl.ServletContextPropertySource">
        <set-object property="context" value="service-property:ApplicationGlobals:context"/>
      </construct>
    </invoke-factory>
  </service-point>
  
  <service-point id="SymbolSourcesPropertySource" interface="org.apache.tapestry.engine.IPropertySource">
    
    Bridges into HiveMind's symbol sources to resolve configuration properties.
    
    <!-- This is tricky, we need to use a custom builder factory. -->
    
    <invoke-factory service-id="SymbolSourcesPropertySourceFactory"/>
    
  </service-point>
  
  <service-point id="SymbolSourcesPropertySourceFactory" interface="org.apache.hivemind.ServiceImplementationFactory" parameters-occurs="none">
    
    A special-purpose ServiceImplementationFactory used just to create the SymbolSourcesPropertySource service.
    
    <create-instance class="org.apache.tapestry.services.impl.SymbolSourcesPropertySourceFactory"/>
  </service-point>
  
  <contribution configuration-id="GlobalPropertySources">
    <source name="servlet" object="service:ServletPropertySource"/>
    <source name="context" object="service:ServletContextPropertySource" after="servlet"/>
    <source name="symbols" object="service:SymbolSourcesPropertySource" after="context"/>
  </contribution>
  
  
  <configuration-point id="ApplicationPropertySources" schema-id="PropertySources">
    
    Property sources used by the application, which includes a search of the
    application specification, a delegate of the application specification, the servlet and
    servlet context, and JVM System Properties.
    
  </configuration-point>
  
  <service-point id="ApplicationPropertySource" interface="org.apache.tapestry.engine.IPropertySource">
    
    Service point for obtaining configuration data resolved using ApplicationPropertySources
    configuration point.
    
    <invoke-factory>
      <construct class="org.apache.tapestry.services.impl.PropertySourceImpl">
        <set-configuration property="contributions" configuration-id="ApplicationPropertySources"/>
      </construct>
    </invoke-factory>
        
  </service-point>
  
  <contribution configuration-id="ApplicationPropertySources">
    <source name="app-spec" object="service:ApplicationSpecificationPropertySource"/>
    <source name="servlet" object="service:ServletPropertySource" after="app-spec"/>
    <source name="context" object="service:ServletContextPropertySource" after="servlet"/>
    <source name="delegate" object="service:DelegatePropertySource" after="context"/>
    <source name="symbols" object="service:SymbolSourcesPropertySource" after="context"/>
  </contribution>
  
  <service-point id="ApplicationSpecificationPropertySource" interface="org.apache.tapestry.engine.IPropertySource">
    
    Obtains property values from application specification meta-data.
    
    <invoke-factory>
      <construct class="org.apache.tapestry.services.impl.ApplicationSpecificationPropertySource">
        <set-service property="specification" service-id="ApplicationSpecification"/>
      </construct>
    </invoke-factory>
    
  </service-point>
  
  <service-point id="DelegatePropertySource" interface="org.apache.tapestry.engine.IPropertySource">
    
    Property source provided as an application extension: org.apache.tapestry.property-source.
    
    <invoke-factory service-id="ExtensionLookupFactory">
      <lookup extension-name="org.apache.tapestry.property-source"/>
    </invoke-factory>
    
  </service-point>
  
  <service-point id="GlobalPropertyObjectProvider" interface="org.apache.hivemind.service.ObjectProvider">
    
    An object provider based on obtaining global properties from the GlobalPropertySource
    service.
    
    <invoke-factory>
      <construct class="org.apache.tapestry.services.impl.PropertyObjectProvider">
        <set-service property="source" service-id="GlobalPropertySource"/>
      </construct>
    </invoke-factory>
    
  </service-point>
  
  <service-point id="ApplicationPropertyObjectProvider" interface="org.apache.hivemind.service.ObjectProvider">
    
    An object provider based on obtained properties from the ApplicationPropertySource service.

    <invoke-factory>
      <construct class="org.apache.tapestry.services.impl.PropertyObjectProvider">
        <set-service property="source" service-id="ApplicationPropertySource"/>
      </construct>
    </invoke-factory>    
    
  </service-point>
  
  <contribution configuration-id="hivemind.ObjectProviders">
    <provider prefix="global-property" service-id="GlobalPropertyObjectProvider"/>
    <provider prefix="app-property" service-id="ApplicationPropertyObjectProvider"/>
  </contribution>
  
  <service-point id="Infrastructure" interface="org.apache.tapestry.services.Infrastructure">
    
    A kind of "clearing house" of other services. The Infrastructure is provided to the
    IEngine instance via the InvokeEngineTerminator service (using an HttpServletRequest
    attribute).  The engine can then get the other services it depends upon.  Ultimately,
    Infrastructure may be removed and the entire IEngine interface may go away!
    
    <invoke-factory>
      <construct class="org.apache.tapestry.services.impl.InfrastructureImpl">
        <set-service property="applicationPropertySource" service-id="ApplicationPropertySource"/>
      </construct>
    </invoke-factory>
    
  </service-point>
  
  <service-point id="ExtensionLookupFactory" interface="org.apache.hivemind.ServiceImplementationFactory">
    
    A service factory that, in fact, attempts to obtain service implementations
    as application extensions.  Failing that, a default implementation is
    constructed.
    
    <parameters-schema>
      
      <element name="lookup">
        
        <attribute name="extension-name" required="true"/>
        
        <conversion class="org.apache.tapestry.services.impl.ExtensionLookupParameter"/>
        
      </element>
      
    </parameters-schema>
    
    <invoke-factory>
      <construct class="org.apache.tapestry.services.impl.ExtensionLookupFactory">
        <set-service property="specification" service-id="ApplicationSpecification"/>
        <set-service property="defaultBuilder" service-id="hivemind.lib.DefaultImplementationBuilder"/>
      </construct>
    </invoke-factory>
  </service-point>
  
  <contribution configuration-id="hivemind.SymbolSources">
    <source name="SystemProperties" before="hivemind.ApplicationDefaults" 
      class="org.apache.hivemind.impl.SystemPropertiesSymbolSource"/>
  </contribution>
</module>
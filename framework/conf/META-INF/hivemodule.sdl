// Copyright 2004 The Apache Software Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module (id=tapestry version="3.1.0")
{
  "The master module for the Tapestry web application framework."
  
  service-point (id=MasterInitializer interface=org.apache.tapestry.services.ApplicationInitializer)
  {
    "Master startup for the application; invokes an ordered series of other ApplicationInitializer instances contributed to "
    "the ApplicationInitializers configuration point."
    
    invoke-factory (service-id=hivemind.BuilderFactory)
    {
      construct (class=org.apache.tapestry.services.impl.MasterInitializer)
      {
        set-configuration (property=initializers configuration-id=ApplicationInitializers)
      }
    }
  }
  
  configuration-point (id=ApplicationInitializers)
  {
    "An orderable list of ApplicationInitializer services."
    
    schema
    {
      element (name=initializer)
      {
       attribute (name=service-id required=true translator=service)
        {
          "The service, which must implement the ApplicationInitializer interface."
        }
      
        attribute (name=before translator=id-list)
        {
          "A comma-seperated list of the names of initializers that should execute after this initializer."
        }
      
        attribute (name=after translator=id-list)
        {
          "A comma-seperated list of the names of initializers that should execute before this initializer."
        }
      
      	// Have to use the more cumbersome rules(), rather than conversion(), because we
      	// map service-id to two different properties.
      	
        rules
        {
          create-object (class=org.apache.tapestry.services.impl.InitializerContribution)
          read-attribute (attribute=service-id property=initializer)
          read-attribute (attribute=service-id property=name translator=qualified-id)
          read-attribute (attribute=before property=before)
          read-attribute (attribute=after property=after)
          invoke-parent (method=addElement)
        }
        
      }  // element initializer
    } // schema
  }
  
  service-point (id=ApplicationSpecificationInitializer interface=org.apache.tapestry.services.ApplicationInitializer)
  {
    "Locates and parses the application specification and informs the ApplicationGlobals service about it."
    invoke-factory (service-id=hivemind.BuilderFactory)
    {
      construct (class=org.apache.tapestry.services.impl.ApplicationSpecificationInitializer)
      {
        set-service (property=classpathResourceFactory service-id=ClasspathResourceFactory)
        set-service (property=globals service-id=ApplicationGlobals)
        set-service (property=parser service-id=SpecificationParser)
      }
    }
  }
  
  service-point (id=ClasspathResourceFactory interface=org.apache.tapestry.services.ClasspathResourceFactory)
  {
    "Constructs new instances of ClasspathResource."
    
    invoke-factory (service-id=hivemind.BuilderFactory)
    {
      construct (class=org.apache.tapestry.services.impl.ClasspathResourceFactoryImpl)
    }
  }
  
  service-point (id=SpecificationParser interface=org.apache.tapestry.services.SpecificationParser)
  {
    invoke-factory (service-id=hivemind.BuilderFactory model=pooled)
    {
      construct (class=org.apache.tapestry.services.impl.SpecificationParserImpl initialize-method="initializeService")
    }
    
    interceptor (service-id=hivemind.LoggingInterceptor)
  }
  
  service-point (id=ApplicationGlobals interface=org.apache.tapestry.services.ApplicationGlobals)
  {
    create-instance (class=org.apache.tapestry.services.impl.ApplicationGlobalsImpl)
  }
  
  contribution (configuration-id=ApplicationInitializers)
  {
    initializer (service-id=ApplicationSpecificationInitializer)
  }
}
<?xml version="1.0"?>
<!-- 
   Copyright 2004, 2005 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<module id="tapestry" version="3.1.0" package="org.apache.tapestry.services">

  The master module for the Apache Tapestry web application framework.

  <dependency module-id="hivemind" version="1.1.0"/>
  <dependency module-id="hivemind.lib" version="1.1.0"/>
  
  <sub-module descriptor="tapestry.init.xml"/>
  <sub-module descriptor="tapestry.globals.xml"/>
  <sub-module descriptor="tapestry.props.xml"/>
  <sub-module descriptor="tapestry.request.xml"/>
  <sub-module descriptor="tapestry.parse.xml"/>
  <sub-module descriptor="tapestry.enhance.xml"/>
  <sub-module descriptor="tapestry.page.xml"/>
  <sub-module descriptor="tapestry.data.xml"/>
  <sub-module descriptor="tapestry.script.xml"/>
  <sub-module descriptor="tapestry.bindings.xml"/>
  <sub-module descriptor="tapestry.services.xml"/>
  <sub-module descriptor="tapestry.ognl.xml"/>
  <sub-module descriptor="tapestry.coerce.xml"/>
  <sub-module descriptor="tapestry.url.xml"/>
  <sub-module descriptor="tapestry.monitor.xml"/>
  <sub-module descriptor="tapestry.asset.xml"/>
  <sub-module descriptor="tapestry.persist.xml"/>
  <sub-module descriptor="tapestry.state.xml"/>
  <sub-module descriptor="tapestry.multipart.xml"/>
  <sub-module descriptor="tapestry.describe.xml"/>
    
  <service-point id="ClasspathResourceFactory" interface="ClasspathResourceFactory">
  
    Constructs new instances of ClasspathResource.
    
    <invoke-factory>
      <construct class="impl.ClasspathResourceFactoryImpl"/>
    </invoke-factory>
  </service-point>
   
  <service-point id="Infrastructure" interface="Infrastructure">
    
    A kind of "clearing house" of other services. The Infrastructure is provided to the
    IEngine instance via the InvokeEngineTerminator service (using an HttpServletRequest
    attribute).  The engine can then get the other services it depends upon.
    The infrastructure: object provider allows access to the properties
    of this service.
    
    <invoke-factory>
      <construct class="impl.InfrastructureImpl">
        <set-object  property="applicationSpecification" value="service-property:tapestry.globals.ApplicationGlobals:specification"/>
        <set-service property="applicationPropertySource" service-id="tapestry.props.ApplicationPropertySource"/>
        <set-service property="globalPropertySource" service-id="tapestry.props.GlobalPropertySource"/>
        <set-service property="componentMessagesSource" service-id="ComponentMessagesSource"/>
        <set-service property="resetEventCoordinator" service-id="ResetEventCoordinator"/>
        <set-service property="templateSource" service-id="tapestry.parse.TemplateSource"/>
        <set-service property="specificationSource" service-id="tapestry.parse.SpecificationSource"/>
        <set-service property="objectPool" service-id="GlobalObjectPool"/>
        <set-service property="pageSource" service-id="tapestry.page.PageSource"/>
        <set-service property="dataSqueezer" service-id="tapestry.data.DataSqueezer"/>
        <set-service property="scriptSource" service-id="tapestry.script.ScriptSource"/>
        <set-service property="serviceMap" service-id="tapestry.services.ServiceMap"/>
        <set-service property="requestExceptionReporter" service-id="RequestExceptionReporter"/>
        <set-service property="responseRenderer" service-id="tapestry.request.ResponseRenderer"/>
        <set-service property="linkFactory" service-id="tapestry.url.LinkFactory"/>
        <set-service property="requestCycleFactory" service-id="tapestry.request.RequestCycleFactory"/>
        <set-service property="applicationStateManager" service-id="tapestry.state.ApplicationStateManager"/>
        <set-service property="request" service-id="tapestry.globals.WebRequest"/>
        <set-service property="response" service-id="tapestry.globals.WebResponse"/>
        <set-service property="componentPropertySource" service-id="tapestry.props.ComponentPropertySource"/>
        <set-object property="applicationId" value="service-property:tapestry.globals.ApplicationGlobals:activatorName"/>
        <set-service property="context" service-id="tapestry.globals.WebContext"/>
        <set-service property="threadLocale" service-id="hivemind.ThreadLocale"/>
      </construct>
    </invoke-factory>
    
  </service-point>
  
  <service-point id="ExtensionLookupFactory" interface="org.apache.hivemind.ServiceImplementationFactory">
    
    A service factory that, in fact, attempts to obtain service implementations
    as application extensions.  Failing that, a default implementation is
    constructed.
    
    <parameters-schema>
      
      <element name="lookup">
        
        <attribute name="extension-name" required="true"/>
        <attribute name="default" translator="object"/>
        
        <conversion class="impl.ExtensionLookupParameter"/>
        
      </element>
      
    </parameters-schema>
    
    <invoke-factory>
      <construct class="impl.ExtensionLookupFactory">
        <set-object property="specification" value="infrastructure:applicationSpecification"/>
        <set-service property="defaultBuilder" service-id="hivemind.lib.DefaultImplementationBuilder"/>
      </construct>
    </invoke-factory>
  </service-point>
  
  
  <service-point id="ResetEventCoordinator" interface="ResetEventCoordinator">
    
    Coordinator for services that have cached information that should be cleared out (this happens
    constantly in development, much more rarely in production).
    
    <create-instance class="impl.ResetEventCoordinatorImpl"/>
  </service-point>
  
  <service-point id="GlobalObjectPool" interface="ObjectPool">
    
    A general purpose object pool used throughout the application. Care should be
    taken to ensure that keys are sufficiently unique.  This service will likely
    be removed soon; replaced with a number of more individual object pools
    (as necessary).
     
    <invoke-factory>
      <construct class="impl.ObjectPoolImpl">
        <event-listener service-id="ResetEventCoordinator"/>
      </construct>
    </invoke-factory> 
  </service-point> 
  
  
  <service-point id="ComponentMessagesSource" interface="ComponentMessagesSource">
    
    Used to provide components (including pages) with access to their own localized messages.
    
    <invoke-factory>
      <construct class="impl.ComponentMessagesSourceImpl">
        <event-listener service-id="ResetEventCoordinator"/>
        <set-object property="componentPropertySource" value="infrastructure:componentPropertySource"/>
      </construct>
    </invoke-factory>
    
  </service-point>
  
  <service-point id="InfrastructureObjectProvider" interface="org.apache.hivemind.service.ObjectProvider">
    
    ObjectProvider mapped to prefix "infrastructure:", the locator is the name of a property of the
    Infratructure service.
    
    <invoke-factory>
      <construct class="impl.InfrastructureObjectProvider">
        <set-service property="infrastructure" service-id="Infrastructure"/>
      </construct>
    </invoke-factory>
    
  </service-point>
  
  
  <contribution configuration-id="hivemind.ObjectProviders">
    <provider prefix="infrastructure" service-id="InfrastructureObjectProvider"/>
  </contribution>
  
  <service-point id="RequestExceptionReporter" interface="RequestExceptionReporter">
    Reports request errors to the console (when reporting using the Exception page fails, or is
    inappropriate).
    
    <invoke-factory>
      <construct class="impl.RequestExceptionReporterImpl">
        <set-object property="request" value="infrastructure:request"/>
      </construct>
    </invoke-factory>
  </service-point>
  
  <service-point id="ObjectTranslator" interface="org.apache.hivemind.schema.Translator" visibility="private">
    
    Translator that works with ObjectProviders to find or create objects.  This is a duplicate
    of the HiveMind service (which is also private).
      
    <invoke-factory>
      <construct
        class="org.apache.hivemind.service.impl.ObjectTranslator">
        <set-configuration configuration-id="hivemind.ObjectProviders" property="contributions"/>
      </construct>
    </invoke-factory>
  </service-point>  
  
  <service-point id="InjectedValueProviderFactory" interface="org.apache.hivemind.ServiceImplementationFactory"
    visibility="private" parameters-occurs="none">
    
    Special service factory for the InjectedValueProvider service.
    
    <invoke-factory>
      <construct class="impl.InjectedValueProviderFactory">
        <set-service property="objectTranslator" service-id="ObjectTranslator"/>
      </construct>
    </invoke-factory>    
  </service-point>
  
  <service-point id="InjectedValueProvider" interface="InjectedValueProvider">
    <invoke-factory service-id="InjectedValueProviderFactory"/>
  </service-point>
  

</module>
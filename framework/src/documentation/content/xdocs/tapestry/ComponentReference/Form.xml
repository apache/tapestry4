<?xml version="1.0"?>
<!-- 
   Copyright 2004, 2005 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "./dtd/document-v12.dtd"
[
	<!ENTITY projectroot '../../'>
	<!ENTITY % links.ent SYSTEM "../../links.ent">
	%links.ent;
]>
<document>
  <header>
    <title>Form</title>
  </header>
  <body>
    <p> A Form component must enclose the other form element components (such as &TextField; and &Checkbox;). It
      manages the rendering of the form as well as processing when the form is submitted (known as "rewinding" the
      form). In traditional web applications, the developer is responsible for providing a name for each form and each
      form control element; in Tapestry, the Form component generates its own unique name, and unique names for each
      enclosed component ... this is necessary to support advanced features such as loops within forms.</p>
    <p>
      <strong>See also: <link href="&apiroot;/form/Form.html">org.apache.tapestry.form.Form</link>,
        &IValidationDelegate;</strong>
    </p>
    <section>
      <title>Parameters</title>
      <table>
        <tr>
          <th>Name</th>
          <th>Type</th>
          <th>Direction</th>
          <th>Required</th>
          <th>Default</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>method</td>
          <td>string</td>
          <td>in</td>
          <td>no</td>
          <td>post</td>
          <td>Method used by the form when it is submitted.</td>
        </tr>
        <tr>
          <td>success</td>
          <td>&IActionListener;</td>
          <td>in</td>
          <td>no</td>
          <td/>
          <td>Listener invoked when the form is submitted normally (not a cancel or a refresh) and the validation
            delegate indicates no errors. If the delegate indicates errors, then the listener parameter (if non-null) is
            used instead.</td>
        </tr>
        <tr>
          <td>cancel</td>
          <td>&IActionListener;</td>
          <td>in</td>
          <td>no</td>
          <td/>
          <td>Listener used when a form is cancelled, overriding the default listener. Forms are cancelled by invoking
            the client-side JavaScript function document.<em>form-name</em>.events.cancel(). A cancelled form <em>does
              not</em> rewind. If no cancel listener is provided, then the normal listener will be used.</td>
        </tr>
        <tr>
          <td>refresh</td>
          <td>&IActionListener;</td>
          <td>in</td>
          <td>no</td>
          <td/>
          <td> Listener used when a form is refreshed, overriding the default listener. A refreshed form bypasses input
            field validation on the client side, though validation still occurs on the server side. If no refresh
            listener is provided, then the normal listener will be used. </td>
        </tr>
        <tr>
          <td>listener</td>
          <td>&IActionListener;</td>
          <td>in</td>
          <td>no</td>
          <td/>
          <td>Default listener to be invoked when the form is submitted. Invoked only if another listener (success,
            cancel or refresh) is not invoked.</td>
        </tr>
        <tr>
          <td>stateful</td>
          <td>boolean</td>
          <td>in</td>
          <td>no</td>
          <td>true</td>
          <td> If true (the default), then an active session is required when the form is submitted, if there was an
            active session when the form was rendered. </td>
        </tr>
        <tr>
          <td>direct</td>
          <td>boolean</td>
          <td>in</td>
          <td>no</td>
          <td>true</td>
          <td> If true (the default), then the more efficient direct service is used. If false, then the action service
            is used. The action service requires rewinding of the entire page, and is rarely (if ever) used.</td>
        </tr>
        <tr>
          <td>delegate</td>
          <td>&IValidationDelegate;</td>
          <td>in</td>
          <td>no</td>
          <td>default instance</td>
          <td> An object that tracks user input and input field errors, and decorates fields and field labels. This is
            typically overriden to provide an application-specific look and feel. </td>
        </tr>
        <tr>
          <td>clientValidationEnabled</td>
          <td>boolean</td>
          <td>in</td>
          <td>no</td>
          <td>false</td>
          <td> If true, then client-side validation will be enabled for components that support it (such as
            &TextField;). </td>
        </tr>
        <tr>
          <td>focus</td>
          <td>boolean</td>
          <td>in</td>
          <td>no</td>
          <td>true</td>
          <td> If true (the default), the the Form will determine a field to receive input focus, and add JavaScript to
            move the cursor to that field. Priority is given to fields in error, then required fields, then any
            non-disabled field. On a page with multiple forms, use this parameter to control which form will take focus.
          </td>
        </tr>
        <tr>
          <td>scheme</td>
          <td>String</td>
          <td>in</td>
          <td>no</td>
          <td/>
          <td> The required scheme ("http" or "https", typically) for the URL. This will force the creation of an
            absolute URL when the current request's scheme does not match the value for this parameter. This is most
            often used to switch to "https" for secure portions of an application (such as a login page), before
            switching back to standard "http" for the majority of an application. </td>
        </tr>
        <tr>
          <td>port</td>
          <td>Integer</td>
          <td>in</td>
          <td>no</td>
          <td/>
          <td> The required port (80, 443, 8080. 8443, typically) for the URL. This will force the creation of an
            absolute URL when the current request's scheme does not match the value for this parameter. This is most
            often used in conjunction with scheme to switch to "https:443"/"https:8443" for secure portions of an
            application (such as a login page), before switching back to standard "http:80"/"http:80" for the majority
            of an application. </td>
        </tr>
      </table>
      <p> Body: <strong>allowed</strong>
      </p>
      <p> Informal parameters: <strong>allowed</strong>
      </p>
      <p> Reserved parameters: action, enctype, id, name, onreset, onsubmit</p>
      <p> A note about clientValidationEnabled: This refers to the revamped input validation support that debuts in
        Tapestry 4.0. The older validation system, centered around the &ValidField; component, still requires that
        clientScriptingEnabled be set on individual &IValidator;s.</p>
    </section>
  </body>
</document>

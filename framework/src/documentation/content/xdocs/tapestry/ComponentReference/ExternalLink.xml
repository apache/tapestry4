<?xml version="1.0"?>
<!-- 
   Copyright 2005 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "./dtd/document-v12.dtd"
[
	<!ENTITY projectroot '../../'>
	<!ENTITY % links.ent SYSTEM "../../links.ent">
	%links.ent;
]>
<document>
  <header>
    <title>ExternalLink</title>
  </header>
  
  <body>
  
  <p>Creates a &lt;a&gt; hyperlink to an <link href="&apiroot;/IExternalPage.html">IExternalPage</link> which may be bookmarked using the hyperlink's URL.</p>

<p>
  <strong>See also: <link href="&apiroot;/link/ExternalLink.html">org.apache.tapestry.link.ExternalLink</link>, &DirectLink;, &GenericLink;, &PageLink;, &ServiceLink;</strong> 
</p>

<section>
  <title>Parameters</title>
  
<table>
  <tr> 
    <th>Name</th>
    <th>Type</th>
	<th>Direction</th>
    <th>Required</th> 
    <th>Default</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>page</td>
    <td>String</td>
    <td>in</td>
    <td>yes</td>
    <td></td>
    <td>
      The name of a application page to link to.
    </td>
  </tr>
  <tr>
    <td>parameters</td>
    <td>Object or Object[] or List</td>
    <td>in</td>
    <td>no</td>
    <td></td>
    <td>
       An array of objects to be encoded into the URL. These parameters will be passed to IExternalPage.activateExternalPage() method.
    </td>
  </tr>
  <tr>
    <td>disabled</td>
    <td>boolean</td>
    <td>in</td>
    <td>no</td>
    <td>false</td>
    <td>
      Controls whether the link is produced. If disabled, the portion of the template the link surrounds is still rendered, but not the link itself.
    </td>
  </tr>
  <tr>
    <td>anchor</td>
    <td>String</td>
    <td>in</td>
    <td>no</td>
    <td></td>
    <td>
        The name of an anchor or element to link to. The final URL will have '#' and the anchor appended to it.
    </td>
  </tr>
  
  <tr>
    <td>scheme</td>
    <td>String</td>
    <td>in</td>
    <td>no</td>
    <td></td>
    <td>
      The required scheme ("http" or "https", typically) for the URL.  This will force the creation
      of an absolute URL when the current request's scheme does not match the value for this parameter.
      This is most often used to switch to "https" for secure portions of an application
      (such as a login page), before switching back to standard "http" for the majority of an application.
    </td>
  </tr>
  
  <tr>
    <td>port</td>
    <td>Integer</td>
    <td>in</td>
    <td>no</td>
    <td/>
    <td> The required port (80, 443, 8080. 8443, typically) for the URL. This will force the creation of an
      absolute URL when the current request's scheme does not match the value for this parameter. This is most
      often used in conjunction with scheme to switch to "https:443"/"https:8443" for secure portions of an
      application (such as a login page), before switching back to standard "http:80"/"http:80" for the majority
      of an application. </td>
  </tr>

  <tr>
    <td>target</td>
    <td>String</td>
    <td>in</td>
    <td>no</td>
    <td></td>
    <td>
         The target window to use in the link.
    </td>
  </tr>
  <tr>
    <td>renderer</td>
    <td><link href="&apiroot;/link/ILinkRenderer.html">ILinkRenderer</link></td>
    <td>in</td>
    <td>no</td>
    <td></td>
    <td>
         The object which will actually render the link.
    </td>
  </tr>
</table>
  
<p>
  Body: <strong>allowed</strong>
</p>  

<p>
  Informal parameters: <strong>allowed</strong>
</p>

<p>
  Reserved parameters: href
</p>

</section>

<section>
  <title>Examples</title>
  <p>
    This example illustrates a page displaying some content based on an id and a language code.
    It contains a link to view the same content in German.
  </p>
<source><![CDATA[
<a href="#" 
   jwcid="@ExternalLink" 
   page="ViewArticle" 
   parameters="ognl:{articleId, 'de'}" 
   disabled="ognl:languageCode=='de'"
>view this article in German</a>

<div jwcid="@Insert" value="ognl:content">content of the article</div>
]]></source>

<source><![CDATA[
package com.myexample;

import org.apache.tapestry.IExternalPage;
import org.apache.tapestry.IRequestCycle;
import org.apache.tapestry.html.BasePage;

public abstract class ViewArticle extends BasePage implements IExternalPage {

  public abstract Integer getArticleId();
  public abstract void setArticleId(Integer articleId);
  public abstract String getLanguageCode();
  public abstract void setLanguageCode(String language);
  
  public void activateExternalPage(Object[] params, IRequestCycle cycle) {
    setArticleId((Integer) params[0]);
    setLanguageCode((String) params[1]);
  }

  public String getContent() {
    // retrieve the content of the article for the selected language
    
  }
  
}
]]></source>

</section>
</body>
</document>
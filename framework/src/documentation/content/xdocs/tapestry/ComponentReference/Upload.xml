<?xml version="1.0"?>
<!-- 
   Copyright 2004, 2005, 2006 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "./dtd/document-v12.dtd"
[
	<!ENTITY projectroot '../../'>
	<!ENTITY % links.ent SYSTEM "../../links.ent">
	%links.ent;
]>
<document>
  <header>
    <title>Upload</title>
  </header>

  <body>

<p>A form element used to handle file uploads. The uploaded file is represented by an instance of &IUploadFile;.</p>

<p>
  <strong>See also: <link href="&apiroot;/form/Upload.html">org.apache.tapestry.form.Upload</link>, &Form;</strong>
</p>

<warning>
  This component may  only be used in Tapestry Servlet Applications; Upload currently
  does not work with Portlet Applications.  See
  <link href="http://issues.apache.org/jira/browse/TAPESTRY-635">TAPESTRY-635</link> for more details.

</warning>

<section>
  <title>Parameters</title>

<table>
  <tr>
    <th>Name</th>
    <th>Type</th>
    <th>Direction</th>

    <th>Required</th>
    <th>Default</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>file</td>
    <td>&IUploadFile;</td>

    <td>out</td>
    <td>yes</td>
    <td></td>
    <td>
      Updated, when the form is submitted, with the name and content uploaded.
    </td>
  </tr>
  <tr>

    <td>disabled</td>
    <td>boolean</td>
    <td>in</td>
    <td>no</td>
    <td>false</td>
    <td>

      If true, then (on render) the "disabled" attribute is written into the tag and on submit, the upload will not update its file parameter.
    </td>
  </tr>
  <tr>
    <td>displayName</td>
    <td>string</td>
    <td>in</td>
    <td>no</td>

    <td></td>
    <td>
      The user-presentable name for the component, which will be used by a &FieldLabel; connected to the component.
    </td>
  </tr>
  <tr>
    <td>validators</td>
    <td>Array or collection of &Validator;, or &Validator;</td>

    <td>in</td>
    <td>no</td>
    <td></td>
    <td>
      The validators to apply to the component.
    </td>
  </tr>
  <tr>

    <td>id</td>
    <td>String</td>
    <td>in</td>
    <td>no</td>
    <td></td>
    <td>
      Sets the id attribute for the rendered &lt;input&gt; element.
    </td>

  </tr>

</table>

<p>
  Body: <strong>removed</strong>
</p>

<p>
  Informal parameters: <strong>allowed</strong>
</p>

<p>
  Reserved parameters: name, type
</p>

</section>

<section>
  <title>Examples</title>

<p>UploadPage.html</p>

<source><![CDATA[
<form jwcid="@Form" listener="listener:formSubmit">
<span jwcid="@FieldLabel" field="component:upload"/>
<input jwcid="upload@Upload" file="ognl:uploadFile" type="file" displayName="File" validators="validators:required"/>
<input type= "submit" value="Upload"/>
<span jwcid="@If" condition="ognl: uploadFile && serverFile">
<ul>
  <li>Filename: <span jwcid="@Insert" value="ognl:uploadFile.fileName"/></li>
  <li>Client path: <span jwcid="@Insert" value="ognl:uploadFile.filePath"/></li>
  <li>Server Path: <span jwcid="@Insert" value="ognl:serverFile.absolutePath"/></li>
  <li>File Size: <span jwcid="@Insert" value="ognl:serverFile.length()" format="ognl:numberFormat"/> bytes</li>
</ul>
</span>
</form>
]]></source>

<p>UploadPage.java</p>

<source><![CDATA[
public abstract class UploadPage extends BasePage {

  public abstract IUploadFile getUploadFile();
  public abstract File getServerFile();
  public abstract void setServerFile(File file);

  public Format getNumberFormat() {
    return NumberFormat.getNumberInstance();
  }

  public void formSubmit(IRequestCycle cycle) {
      if (getUploadFile() == null) {
        return;
      }

      InputStream fis = getUploadFile().getStream();
      FileOutputStream fos = null;

      try {
          fos = new FileOutputStream(new  File(getUploadFile().getFileName()));
          byte[] buffer = new byte[1024];
          while (true) {
              int length = fis.read(buffer);
              if (length <  0) {
                  break;
              }
              fos.write(buffer, 0, length);
          }
          fis.close();
          fos.close();
          setServerFile(new File(getUploadFile().getFileName()));

      } catch (IOException ioe) {
          ioe.printStackTrace();
      } finally {
          if (fis != null) {
              try { fis.close(); } catch (IOException ioe) {}
          }
          if (fos != null) {
              try { fos.close(); } catch (IOException ioe) {}
          }
      }
  }

}
]]></source>


</section>
</body>
</document>
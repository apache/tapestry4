<?xml version="1.0"?>
<!-- 
   Copyright 2004, 2005 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "./dtd/document-v12.dtd"
[
	<!ENTITY projectroot '../../'>
	<!ENTITY % links.ent SYSTEM "../../links.ent">
	%links.ent;
]>
<document>
  <header>
    <title>Foreach</title>
  </header>
  
  <body>

<p> A component that loops through a set of values, setting a property for each
	value before rendering its wrapped elements.
</p>

<p>
  <strong>See also:</strong> &For;
</p>

      <warning>
          This component has been deprecated; Tapestry 4.0 adds the &For; component which
          replaces Foreach and &ListEdit; components.
      </warning>

<section>
  <title>Parameters</title>
  
<table>
  <tr> 
    <th>Name</th>
    <th>Type</th>
	  <th>Direction</th>
    <th>Required</th> 
    <th>Default</th>
    <th>Description</th>
  </tr>
    <tr>
        <td>source</td>
        <td>Iterator, Collection, Object[], or Object</td>

        <td>in</td>
        <td>yes</td>
    <td>

    </td>
        <td>
    The source of objects to be iterated, which may be a Collection, an Iterator, an array of Objects, or a even a single Object (which is treated as a singleton collection).
The source parameter may even be null, in which case the Foreach's body is never renderred.
    </td>
        </tr>
    <tr>
        <td>value</td>
        <td>Object</td>

        <td>out</td>
        <td>no</td>
    <td>

    </td>
        <td>
    Used to update the current value on each iteration.
    </td>
        </tr>
    <tr>
        <td>index</td>
        <td>int</td>

        <td>out</td>
        <td>no</td>
    <td>

    </td>
        <td>
    Used to store the index of the current value within the stream of elements provided by the source parameter. The index parameter is explicitly updated before the value parameter.
    </td>
        </tr>
    <tr>
        <td>element</td>
        <td>String</td>

        <td>in</td>
        <td>no</td>
    <td>

    </td>
        <td>
    If specified, then the component acts like an &Any;, emitting an open and close tag before and after each iteration. Most often, the element is "tr" when the Foreach is part of an HTML table. Any informal parameters are applied to the tag. If no element is specified, informal parameters are ignored.
    </td>
        </tr>

	</table>
  
<p>
  Body: <strong>allowed</strong>
</p>  

<p>
  Informal parameters: <strong>allowed</strong>
</p>

<p>
  Reserved parameters: <em>none</em>
</p>

</section>

<section>
  <title>Examples</title>
  <p> The Foreach component is used to generate a table from a Customer List.</p>
    <p><strong>Template</strong></p>
<source><![CDATA[
<table cellspacing="6">
  <tr>
   <td>ID</td>
   <td>&nbsp;</td>
   <td>Name</td>
   <td>&nbsp;</td>
   <td>Level</td>
  </tr>
  <tr>
   <td colspan="5"><hr></td>
  </tr>
  <tr jwcid="@Foreach" source="ognl:customerList" value="ognl:customer" element="tr">
   <td><span jwcid="@Insert" value="ognl:customer.id"/></td>
   <td>&nbsp;</td>
   <td><span jwcid="@Insert" value="ognl:customer.fullName"/></td>
   <td>&nbsp;</td>
   <td><span jwcid="@Insert" value="ognl:customer.memberLevel"/></td>
  </tr>
</table>
]]></source>
    <p><strong>Page Specification</strong></p>
<source><![CDATA[
.....
<property name="customerList" type="java.util.List" persistent="yes"/>
<property name="customer" type="Customer"/>
.....
]]></source>
    <p><strong>Java</strong></p>
<source><![CDATA[
public abstract class SalesPage extends BasePage {
    public abstract List getCustomerList();

    public abstract void setCustomerList(List value);
}

public class Customer implements Serializable {
    private Integer id;
    private String fullName;
    private String memberLevel;

    public Customer(Integer id, String fullName, String memberLevel) {
        this.id = id;
        this.fullName = fullName;
        this.memberLevel = memberLevel;
    }

    public Integer getId() { return id; }

    public String getFullName() { return fullName; }

    public String getMemberLevel() { return memberLevel; }
}
]]></source>

</section>
</body>
</document>
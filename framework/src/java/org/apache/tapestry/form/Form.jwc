<?xml version="1.0" encoding="UTF-8"?>
<!-- 
   Copyright 2004, 2005 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<!DOCTYPE component-specification PUBLIC 
  "-//Apache Software Foundation//Tapestry Specification 4.0//EN" 
  "http://jakarta.apache.org/tapestry/dtd/Tapestry_4_0.dtd">
  
<component-specification class="org.apache.tapestry.form.Form">

  <!-- Note: remember to keep Go.jwc synchronized with any changes here! -->  
    
  <description>
  Used to implement an HTML form.
  </description>

  <bean name="defaultDelegate" class="org.apache.tapestry.valid.ValidationDelegate"/>
  
  <parameter name="method" default-value="post" default-binding="literal">
    <description>
    The method used by the form when it is submitted, defaults to "post".
    </description>
  </parameter>
  
  <parameter name="listener" default-binding="listener">
    <description>
  	Object invoked when the form is submitted, after all form components have responded
  	to the submission.
    </description>
  </parameter>
  
  <parameter name="cancel" default-binding="listener">
      <description>
          Object invoked when the form is cancelled (a special type of form submission).
          The cancel listener (if any) overrides the standard listener. Other properties
          will not be affected by the rewind.
       </description>
   </parameter>
  
  <parameter name="refresh" default-binding="listener">
      <description>
          Object invoked when the form is refreshed (a special type of form submission).
          The refresh listener (if any) overrides the standard listener.
          Other properties managed by enclosed components will be updated.
      </description>
  </parameter>
  
  <parameter name="stateful" default-value="true" default-binding="ognl">
    <description>
    If true (the default), then an active session is required when the
        form is submitted, if there was an active session when the
        form was rendered.
    </description>
  </parameter>
  
  <parameter name="direct" default-value="true" default-binding="ognl">
    <description>
    If true (the default), then the more efficient direct service is used.
    If false, then the action service is used.
    </description>
  </parameter>
  
  <parameter name="delegate" default-binding="ognl" default-value="bean:defaultDelegate">
    <description>
    Specifies the delegate to be used by fields to track input errors. If not specified, the
        Form provides a default instance of org.apache.tapestry.valid.ValidationDelegate.
    </description>
  </parameter>
  
  <parameter name="clientValidationEnabled" default-binding="ognl">
    <description>
    If true (the default) then client-side validation will be generated upon render for any
        required or validating fields.
	</description>
  </parameter>
  
  <parameter name="focus" default-binding="ognl" default-value="true">
    <description>
      If true (the default), then the form will attempt to get field focus on the first
      field in error (or first required field, or just first field) within the form.
      Set to false to allow a different Form on the same page to claim field focus.
    </description>
  </parameter>
  
  <reserved-parameter name="action"/>
  <reserved-parameter name="name"/>
  <reserved-parameter name="onsubmit"/>
  <reserved-parameter name="onreset"/>
  <reserved-parameter name="enctype"/>
  
  <inject property="directService" object="engine-service:direct"/>
  <inject property="actionService" object="engine-service:action"/>
  <inject property="response" object="infrastructure:response"/>
  <inject property="listenerInvoker" object="infrastructure:listenerInvoker"/>

</component-specification>

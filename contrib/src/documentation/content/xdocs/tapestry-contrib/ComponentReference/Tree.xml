<?xml version="1.0"?>
<!-- 
   Copyright 2005 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "./dtd/document-v12.dtd"
[
	<!ENTITY projectroot '../../'>
	<!ENTITY % links.ent SYSTEM "../../links.ent">
	%links.ent;
]>
<document>
  <header>
    <title>Tree</title>
  </header>
  
  <body>

<p> Renders hierarchical data as a tree.
</p>

<p>
	The Tree component uses the lower level components 
	<link href="&apicontrib;/contrib/tree/components/TreeView.html">TreeView</link>
	(handles the tree model),
	<link href="&apicontrib;/contrib/tree/components/TreeDataView.html">TreeDataView</link>
	(handles the tree data),
	<link href="&apicontrib;/contrib/tree/components/TreeNodeView.html">TreeNodeView</link>
	(handles the presentation of the data).				
</p>	  	  

<p>
  <strong>See also: &TreeView;, &TreeDataView;, &TreeNodeView;</strong> 
</p>

<section>
  <title>Parameters</title>
  
<table>
  <tr> 
    <th>Name</th>
    <th>Type</th>
	<th>Direction</th>
    <th>Required</th> 
    <th>Default</th>
    <th>Description</th>
  </tr>
	
	<tr>
      <td>sessionStateManager</td>
      <td>
		  <link href="&apicontrib;/contrib/tree/model/ITreeSessionStateManager.html">ITreeSessionStateManager</link>
	  </td>
	  <td>custom</td>
	  <td>no</td>
	  <td>&nbsp;</td>
      <td>
        Manages the state of the tree (i.e. which nodes are open, closed or selected).
      </td>
    </tr>
	
	<tr>
      <td>sessionStoreManager</td>
      <td>
		  <link href="&apicontrib;/contrib/tree/model/ISessionStoreManager.html">ISessionStoreManager</link>
	  </td>
	  <td>custom</td>
	  <td>no</td>
	  <td>&nbsp;</td>
      <td>
        Allows storing the tree (or parts of it) to the session.
      </td>
    </tr>
	
	<tr>
      <td>treeModel</td>
      <td>
		  <link href="&apicontrib;/contrib/tree/model/ITreeModel.html">ITreeModel</link>
	  </td>
	  <td>custom</td>
	  <td>yes</td>
	  <td>&nbsp;</td>
      <td>
        Defines a model that can provide the nodes of the tree.
      </td>
    </tr>
	
	<tr>
      <td>treeStateListener</td>
      <td>
		  <link href="&apicontrib;/contrib/tree/model/ITreeStateListener.html">ITreeStateListener</link>
	  </td>
	  <td>custom</td>
	  <td>no</td>
	  <td>&nbsp;</td>
      <td>
        If specified, this object will receive events generated by the tree. 
		  Such events are: SELECTED_NODE_CHANGED, NODE_EXPANDED and NODE_COLLAPSED.
      </td>
    </tr>
	
	<tr>
      <td>nodeRenderFactory</td>
      <td>
		  <link href="&apicontrib;/contrib/tree/components/INodeRenderFactory.html">INodeRenderFactory</link>
	  </td>
	  <td>custom</td>
	  <td>no</td>
	  <td>(<link href="&apicontrib;/contrib/tree/simple/SimpleNodeRenderFactory.html">SimpleNodeRenderFactory</link>)</td>
      <td>
        Allows custom rendering of each node.
        <p>This parameter defines a factory responsible for creating <link href="&apiroot;/IRender.html">IRender</link> instances
		which will be used to perform the actual render of each node.</p>
		  <p>The default factory returns <link href="&apiroot;/valid/RenderString.html">RenderString</link> instances
			  that output each node's <code>toString()</code>.
		  </p>		  
      </td>
    </tr>		
	
	<tr>
      <td>showNodeImages</td>
      <td>boolean</td>
	  <td>custom</td>
	  <td>no</td>
	  <td>(true)</td>
      <td>
        If node images are shown.
      </td>
    </tr>
	
	<tr>
      <td>makeNodeDirect</td>
      <td>boolean</td>
	  <td>custom</td>
	  <td>no</td>
	  <td>(true)</td>
      <td>
        If true, renders a link around nodes that contain children. This allows 
		  expanding and collapsing the node.
      </td>
    </tr>	
	
	<tr>
      <td>showRootNode</td>
      <td>boolean</td>
	  <td>custom</td>
	  <td>no</td>
	  <td>(true)</td>
      <td>
        If root node should be visible.
      </td>
    </tr>					

	</table>
  
<p>
  Body: <strong>allowed</strong>
</p>  

<p>
  Informal parameters: <strong>allowed</strong>
</p>

<p>
  Reserved parameters: <em>none</em>
</p>

</section>

<section>
  <title>Examples</title>
    <p>
     The following sample code shows how to create and render a simple tree.
    </p>
	
<source><![CDATA[
<span jwcid="@contrib:Tree" treeModel="ognl:treeModel"/>

public abstract class TreePage extends BasePage {   
    private ITreeModel model;     
    
    public ITreeModel getTreeModel() {
        if (model == null) {
            TreeNode root = new MyNode("root");
            TreeNode child1 = new MyNode("child1");
            TreeNode child2 = new MyNode("child2");
            TreeNode child1of1 = new MyNode("child1of1");
            TreeNode child2of1 = new MyNode("child2of1");
            root.insert(child1);
            root.insert(child2);
            child1.insert(child1of1);
            child1.insert(child2of1);
            
            SimpleTreeDataModel dataModel = new SimpleTreeDataModel(root);
            model = new SimpleTreeModel(dataModel);
        }        
        return model;        
    }    
}

class MyNode extends TreeNode {
    protected String value;
    
    MyNode(String val) {
        super(null);
        value = val;
    }
    
    public String toString() {
        return value;
    }
    
    public int hashCode() {
        return value.hashCode();
    }

    public boolean equals(Object objTarget) {
        if(objTarget == this)
            return true;
        if(! (objTarget instanceof MyNode))
            return false;

        MyNode objTargetNode = (MyNode)objTarget;
        return value.equals(objTargetNode.value);
    }    
}
]]></source>	
</section>
</body>
</document>
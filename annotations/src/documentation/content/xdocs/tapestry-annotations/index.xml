<?xml version="1.0"?>
<!-- 
   Copyright 2005 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "./dtd/document-v12.dtd" [
  
<!ENTITY spec '../UsersGuide/spec.html'>
<!ENTITY javadoc 'apidocs/org/apache/tapestry/annotations'>  
  
 ]>
<document>

  <header>
    <title>Tapestry Annotations</title>
	</header>
	
  <body>
    <p> This library does not contain components; instead it provides <em>annotations</em>, 
      a <link href="http://java.sun.com/j2se/1.5.0/docs/guide/language/annotations.html">new feature 
        in JDK 1.5</link>. Annotations allow you to perform some operations inside Java code that otherwise would be specified in the page or component specification. This is very useful when using inheritance, because base classes can provide annotations that are inherited by subclasses. </p>
        
        <p>
          The annotations are all in the package org.apache.tapestry.annotations.
        </p>
            
<p>
 Remember that a property should only have, at most, one of these annotations!  Having multiple
 annotations, or conflicts between annotations and directives in the specification, will result
 in runtime exceptions.  In addition, annotations don't provide the kind of line precise location
 data that the XML specifications or the templates do (but most exceptions will clearly identify the
 class and method, which should be sufficient).
</p>        
        
<section>
  <title>InjectAsset</title>
  
  <p>
    The <link href="&javadoc;InjectAsset.html">InjectAsset</link> annotation
    allows assets defined in the page or component specification to be exposed
    as read-only properties.  It is attached to an accessor method:
  </p>
  
<source>
  @InjectAsset("stylesheet")
  public abstract IAsset getStylesheet();
</source>

<p>
This is equivalent to specifying the property attribute of the 
<link href="&spec;#spec.asset">&lt;asset&gt;</link> element.
</p>

</section>   

<section>
  <title>InjectComponent</title>
  
  <p>
    The <link href="&javadoc;/InjectComponent.html">InjectComponent</link> annotation
    allows nested components  to be injected as read-only properties. It is attached
    to an accessor method:
   </p>
      
<source>
  @InjectComponent("inputUserName")
  public abstract TextField getUserInput();
</source>    

  <p>
  This is functionally the same as providing the property attribute of the
  <link href="&spec;#spec.component">&lt;component&gt;</link> element.
  </p>
  
</section>
        

<section>
  <title>InjectObject</title>
  
  <p>
  The <link href="&javadoc;/InjectObject.html">InjectObject</link> annotation
  allows HiveMind objects to be injected. It is attached to an accessor method:
  </p>
  
<source>
  @InjectObject("infrastructure:request")
  public abstract WebRequest getRequest();
</source>  
    
<p>
The end result is the same as using the <link href="&spec;#spec.inject">&lt;inject&gt;</link> element,
with the default type of "object".
</p>    
    
</section>    

<section>
  <title>InjectState</title>
  
  <p>
    The <link href="&javadoc;/InjectState.html">InjectState</link> annotation
    allows an Application State Object to be injected and a read/write property.  It
    is attached to an accessor method:
  </p>
  
<source>
  @InjectState("visit")
  public abstract MyAppVisit getVisit();
</source>    
  
  <p>
    The end result is equivalent to using the <link href="&spec;#spec.inject">&lt;inject&gt;</link> element,
with  a type of "state".
  </p>  
    
</section>

<section>
  <title>Persist</title>
  
  <p>
    The <link href="&javadoc;/Persist.html">Persist</link> annotation allows a property to be
    marked as persistent.  Remember that any otherwise unclaimed abstract property will become
    a <em>transient</em> property automatically (in Tapestry 4.0), so Persist is only need
    to mark a property as persistent.  
  </p>
  
  <p>
   The value of the Persist annotation defaults to "session":
  </p>
  
<source>
  @Persist
  public abstract int getSessionPersistentProperty();
  
  @Persist("client")
  public abstract double getClientPersistentProperty();
</source>  

<p>
This annotation works exactly like a <link href="&spec;#spec.property">&lt;property&gt;</link>
element, except that the initial-value attribute can't be specified.
</p>

</section>

       
  </body>
</document>

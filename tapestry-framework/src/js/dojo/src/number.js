
dojo.provide("dojo.number");dojo.require("dojo.experimental");dojo.experimental("dojo.number");dojo.require("dojo.i18n.common");dojo.requireLocalization("dojo.i18n.cldr", "number", null, "en,en-in,fr,ROOT");dojo.require("dojo.string.common");dojo.require("dojo.string.extras");dojo.require("dojo.regexp");dojo.number.format = function(value, options){options = options || {};var locale = dojo.hostenv.normalizeLocale(options.locale);var bundle = dojo.i18n.getLocalization("dojo.i18n.cldr", "number", locale);var pattern = options.pattern || bundle[(options.type || "decimal") + "Format"];return dojo.number.applyPattern(value, pattern, {symbols: bundle, places: options.places, round: options.round});};dojo.number._numberPatternRE = /(?:[#0]*,?)*[#0]+(?:\.0*#*)?/;dojo.number.applyPattern = function(value, pattern, options){options = options || {};var group = options.symbols.group;var decimal = options.symbols.decimal;var patternList = pattern.split(';');var positivePattern = patternList[0];pattern = patternList[(value < 0) ? 1 : 0] || ("-" + positivePattern);if(pattern.indexOf('%') != -1){value *= 100;}else if(pattern.indexOf('\u2030') != -1){value *= 1000;}else if(pattern.indexOf('\u00a4') != -1){group = options.symbols.currencyGroup || group;decimal = options.symbols.currencyDecimal || decimal;pattern.replace('/\u00a4{1,3}/', function(match){switch(match.length){case 1:
return options.symbols.symbol;case 2:
return currencyISO;case 3:
return "United States Dollars?";}});}else if(pattern.indexOf('E') != -1){dojo.unimplemented("exponential notation not supported");}
var numberPatternRE = dojo.number._numberPatternRE;var numberPattern = positivePattern.match(numberPatternRE);if(!numberPattern){dojo.raise("unable to find a number expression in pattern: "+pattern);}
var output = pattern.replace(numberPatternRE, dojo.number.formatAbsolute(value, numberPattern[0], {decimal: decimal, group: group, places: options.places}));return output;}
dojo.number.formatAbsolute = function(value, pattern, options){options = options || {};value = Math.abs(value);var round = false;var valueParts = String(value).split(".");var patternParts = pattern.split(".");var fractional = valueParts[1] || "";if(options.places){valueParts[1] = dojo.string.pad(fractional.substr(0, options.places), options.places, '0', -1);}else if(patternParts[1] && options.places !== 0){var pad = patternParts[1].lastIndexOf("0") + 1;if(pad > fractional.length){valueParts[1] = dojo.string.pad(fractional, pad, '0', -1);}
var places = patternParts[1].length;if(places < fractional.length){valueParts[1] = fractional.substr(0, places);}}else{if(valueParts[1]){ valueParts.pop(); }}
var patternDigits = patternParts[0].replace(',', '');pad = patternDigits.indexOf("0");if(pad != -1){pad = patternDigits.length - pad;if(pad > valueParts[0].length){valueParts[0] = dojo.string.pad(valueParts[0], pad);}
if(patternDigits.indexOf("#") == -1){valueParts[0] = valueParts[0].substr(valueParts[0].length - pad);}}
var index = patternParts[0].lastIndexOf(',');var groupSize, groupSize2;if(index != -1){groupSize = patternParts[0].length - index - 1;var remainder = patternParts[0].substr(0, index);index = remainder.lastIndexOf(',');if(index != -1){groupSize2 = remainder.length - index - 1;}}
var pieces = [];for(var whole = valueParts[0]; whole;){var off = whole.length - groupSize;pieces.push((off > 0) ? whole.substr(off) : whole);whole = (off > 0) ? whole.slice(0, off) : "";if(groupSize2){groupSize = groupSize2;delete groupSize2;}}
valueParts[0] = pieces.reverse().join(options.group || ",");return valueParts.join(options.decimal || ".");};dojo.number.parse = function(expression, options){options = options || {};var locale = dojo.hostenv.normalizeLocale(options.locale);var bundle = dojo.i18n.getLocalization("dojo.i18n.cldr", "number", locale);var pattern = options.pattern || bundle[(options.type || "decimal") + "Format"];var group = bundle.group;var decimal = bundle.decimal;var patternList = pattern.split(';');if (patternList.length == 1){patternList.push("-" + patternList[0]);}
if(options.strict && !dojo.number._buildNumberFormatRE(pattern, {}).test(expression)){return NaN;}
var re = dojo.regexp.buildGroupRE(patternList, function(pattern){pattern = dojo.regexp.group(dojo.string.escape('regexp', pattern, '.'), true);return pattern.replace(dojo.number._numberPatternRE, "([\\d\\"+group+"]+(?:\\"+decimal+"\\d+)?)");}, true);var results = (new RegExp("^"+re+"$")).exec(expression);if(!results){return NaN;}
var numberExpression = results[1];if(typeof numberExpression == 'undefined'){var negative = true;numberExpression = results[2];}
numberExpression = numberExpression.replace(group, "", "g").replace(decimal, ".");value = Number(numberExpression);if(!isNaN(value)){if(negative){ value = -value; }}
return value;};dojo.number._buildNumberFormatRE = function(pattern, options){dojo.unimplemented("dojo.number._buildNumberFormatRE");var numberPatternRE = dojo.number._numberPatternRE;var numberPattern = pattern.match(numberPatternRE);if(!numberPattern){dojo.raise("unable to find a number expression in pattern: "+pattern);}
pattern = pattern.replace(numberPatternRE, "\\d...");return new RegExp("^" + pattern + "$");};